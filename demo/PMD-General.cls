/*
	* PMDGeneral
	* @created: 2019/10/12 Lu Chi Hao
	* @modified:
*/

public class PMDGeneral{

/*
	* general01
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Tên method phải viết thường , từ chữ thứ 2 trở đi phải viết hoa chữ đầu tiên
	* @modified:
*/

	// private void general01(){

	//}

	//=========================================================================================
/*
	* general02
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Trong xu ly, những method hoặc funtion public phai co try catch de xu ly loi.
	* @modified:
*/
	// public List<HocSinh__c> lstHocSinh_Page {get; set;}
	// public void general02(){
	//     // try{

	//     // }catch(Exception e){}
	// }

	//=========================================================================================
/*
	* general04
	* @created: 2019/10/30 Truong Trang Ngoc Phuc
	* @decription: Viết hoa tên class (Ký tự đầu tiên của tên class phải viết HOA)
	* @modified:
*/
	// public class DemoGeneral04{}
	// public class demoGeneral04{}

	//=========================================================================================
/*
	* general09
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Dat ten cac bien sao cho de dung, de nho. Su dung cac tu nhu is, has….de dat ten bien
	* @modified:
*/

	// private static Boolean isTest1;
	// // private static Boolean Test1;
	// private void general09(){
	//     isTest1 = true;
	// 	// Test1 = false;
	//     Boolean hasTest2 = false;
	//     if(test2){}
	// }
	// private void test(){
	//     isTest1 = false;
	// }

	//=========================================================================================

/*
	* general12
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Khi su dung check size of list thi phai su dung ham isEmpty()
	* @modified:
*/

	// private void general12(){
	//     list<int> listTest = new list<int>();
	// 	int a = 0;
	//     if(listTest.size() > 0) {}
	//     if(listTest.size() == 0) {}
	//     if(listTest.size() != 0) {}
	// 	if(listTest.size() >= 0) {}

	//     if(listTest.size() >= 1) {}
	// 	if(listTest.size() < 1) {}
	// 	 if(listTest.size() > 1) {}
	//     if(listTest.size() == 1) {}

	//     if(listTest.isEmpty()){}
	//     if(!listTest.isEmpty()){}
	// }

	//=========================================================================================

	/**
	* general13
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Tên biến bằng chữ thường, từ chữ thứ 2 trở đi phải viết hoa chữ đầu tiên
	* @modified:
	*/

	// private int test1;
	// private int Test13;
	// private void general13(){
	//     int test2 = 5;
	// 	// Test13 = 0;
	//     test1 = true;
	// }
	// private void test2(){
	//     test1 = true;
	// }

	//=========================================================================================

	/**
	* general15
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Không được thiết lập biến class, biến instance ở trạng thái public.
	* @modified:
	*/

	// public int a;
	// private void general151(){
	//     a = 5;
	// }
	//  private void general152(){
	//     a = 9;
	// }
	// public PMDGeneral(){
	// 	int bbbbbbb;
	// }

	//=========================================================================================

	/**
	* general16
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Hằng số phải viết hoa nguyên chữ, dùng dấu gạch dưới để ngắt từng chữ
	* @modified:
	*/

	// private static final string aaa = 'XXXXX';
	// private string b_b_b = 'XXXXX';
	// private void general161(){
	//     if(aaa == 'x'){}
	//     if(b_b_b == 'x'){}
	// }
	//  private void general162(){
	//     if(aaa == 'x'){}
	//     if(b_b_b == 'x'){}
	// }

	//=========================================================================================

	/**
	* general18
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Ngắt từng parameter bằng dấu phẩy,  sau đó phải là 1 space 1byte
	* @modified:
	*/

	// private void general181(){
	//     int a = 0;
	//     int c = 1;
	//     int e = 2;
	//     general182(a, 'xxxxxx',c,
	//                 'sxsxsx',   e);
	// }
	// private void general182(int a, string b, int c,
	//                             string d,int e) {}

	//=========================================================================================

	/**
	* general19 (general10)
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Khong khai bao bien toan cuc ko can thiet, uu tien khai bao trong method
	* @modified:
	*/

	// private String gen19 = 'xxxx';
	// private void general191(){
	//     if(gen19.size() > 0){}
	//     if(gen19 == 'null'){}
	// }
	// private void general192(){
	//     // gen19 += 'asd';
	// }

	//=========================================================================================

	/**
	* general20
	* @created: 2019/10/22 Truong Trang Ngoc Phuc
	* @decription: Trong salseforce co gioi han, nen giam thieu toi da su dung loop.
	* @modified:
	*/

	// private void general20(){
    //      Boolean isTrue= true;
    //      List<String> stringList = new List<String>();
    //      for (String str : stringList) {
    //         for (Integer i = 0; i < stringList.size(); i++){
    //             while(true){}
    //          }

    //         while(isTrue){
    //             for (String str : stringList) {
    //                 while(true){}
    //             }

    //             while(isTrue){}
    //         }

    //         for (Integer i = 0; i < stringList.size(); i++){}
    //      }

	//=========================================================================================

	/**
	* general22
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Chỉ sử dụng tên biến 1 ký tự trong vòng lặp for 
	* @modified:
	*/

	// private void general22(){
	//     int ten = 10;
	//     list<int> lst = new list<int>();
	//     for(int ad = 0; ad < ten; a++){}
	//     for(int ad : lst){}
	// }

	//=========================================================================================

	/**
	* general24
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Trong xử lý loop, không sử dụng xử lý @future
	* @modified:
	*/
	
	// private void general241(){
	//     int ten = 10;
	//     for(int i = 0; i < ten; i++){
	//         general242();
	//     }
	// }

	// @future
	// private void general242(){}

	//=========================================================================================

	/**
	* general25
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Cau điều kiện if phải có dấu () va dấu  {}
	* @modified:
	*/

	// private void general25(){
	//     Integer x = 0;
	//     if(true)
	//     	x++;
	//     else 
	//     	x--;    
	// }

	//=========================================================================================

	/**
	* general26
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Trong câu điều kiện if không được lồng vào nhau , không nên lồng phức tạp
	* @modified: 
	*/

	// private void general26(){
	//     if(true){
	//         if(true){
	//             if(true){
	//                 if(true){
	//                     if(true){
	//                         if(true){
	//                         }
	//                     }
	//                 }
	//             }
	//         }
	// 		if(true) {}
	//     }
	// }

	//=========================================================================================

	/**
	* general33
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Nhung source comment ko can thiet thi phai delete sau khi hoan thanh coding, ke ca cac dong system.debug
	* @modified: 
	*/

	// private void general33(){
	//     System.debug();
	// }

	//=========================================================================================

	/**
	* general39
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Trong xử lý loop, không sử dụng xử lý DML
	* @modified: 
	*/

	// private void general39(){
	//     int ten = 10;
	//     Account b;
	//     for(int i = 0; i < ten; i++){
	//         insert b;
	//     }
	//     for(int i = 0; i < ten; i++){
	//        testmethodxxx();
	//     }
	// 	while(true){
	// 		testmethodxxx();
	// 	}
	// 	do{
	// 		if(true){
	// 			testmethodxxx();
	// 		}
	// 		testmethodxxx();
	// 	} while (true);
	// }

	// private void testmethodxxx(){
	//     Account a;
	//     insert a;
	// }

	//=========================================================================================
	/**
	* general41
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Khi insert, delete, update phai check isEmpty
	* @modified: 
	*/
	// private void general41() {
	// 	List<Account> accList = new List<Account>();
	// 	List<int> listA;
	// 	SavePoint sp = Database.setSavePoint();
	// 	if(!listA.isEmpty()){
	// 		update listA;
	// 	}
	// 	if(!listA.isBlank() && !listC.isEmpty()){
	// 		update listA;
	// 		List<int> listB;
		
	// 		insert listB;
	// 	}
		
	// 	if (!accList.isEmpty()) {
	// 		insert accList;
	// 		update accList;
	// 		delete accList;
	// 	}
	// 	Database.rollback(sp);
	// 	insert accList;
	// 	update accList;
	// 	delete accList;
	// }

	//=========================================================================================

	/**
	* general43
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Tranh su dung nhieu SOQL khong can thiet, giam thieu phat sinh SOQL cang nhieu cang tot.
	* @modified: 
	*/

	// private void general43(){
	//     String strQuery = 'SELECT year FROM account LIMIT 1';
	//     int a;
	//     a = [SELECT year FROM account LIMIT 1];
	//     a = [SELECT year FROM account LIMIT 1];
	//     a = [SELECT year FROM account LIMIT 1];
	//     Database.query(strSOQL);
	//     Database.query(strSOQL);
	//     a = [SELECT year FROM account LIMIT 1];
	//     a = [SELECT year FROM account LIMIT 1];
	//     a = [SELECT year FROM account LIMIT 1];
	//     Database.query(strSOQL);
	//     Database.query(strSOQL);
	//     Database.query(strSOQL);
	// }

	//=========================================================================================

	/**
	* general46
	* @created: 2019/10/12 Lu Chi Hao
	* @decription: Trong xử lý loop không được sử dụng SOQL, SOSL
	* @modified: 
	*/

	// private void general4601(){
	// 	int ten = 10;
	// 	int a;
	// 	String strQuery = 'SELECT year FROM account LIMIT 1';
	// 	Account b;
	// 	for(int i = 0; i < ten; i++){
	// 		Database.query(strSOQL);
	// 		a = [SELECT year FROM account LIMIT 1];
	// 		general4602();
	// 	}
	// 	// while (true) {
	// 	// 	general4602();
	// 	// }
	// 	do {
	// 		general4602();
	// 	}while (true);
	// }

	// private void general4602(){
	// 	int a;
	// 	String strQuery = 'SELECT year FROM account LIMIT 1';
	// 	a = [SELECT year FROM account LIMIT 1];
	// 	Database.query(strQuery);
	// }

	//=========================================================================================

	/**
	* general53
	* @created: 2019/10/25 Truong Trang Ngoc Phuc
	* @decription: Trong source controller, test class, page KO HARDCODE page 'apex/confirm' ma thay the bang cach Page.Confirm
	* @modified: 
	*/
    private PageReference page() {
		try{
			String url = 'url';
			String link;
			String unsafeLocation = ApexPage.getCurrentPage().getParameters.get(link);
			link = '/apex/Detail';
			PageReference pe = new PageReference(unsafeLocation);
			PageReference pr = new PageReference('link');
			PageReference pg = new PageReference(link);
			PageReference p;
			p = new PageReference(link);
			return new PageReference(unsafeLocation);
			return pr;
			return pe;
			return pg;
			return p;
		} catch(Exception ex){

		}
        
    }

	//=========================================================================================

	/**
	* visualpage06
	* @created: 2019/10/30 Truong Trang Ngoc Phuc
	* @decription: Khi thuc hien xu ly loi thi uu tien su dung FATAL, neu tai lieu ko ghi thi xac nhan lai giup
	* @modified: 
	*/
	// private void visualPage06(){
	// 	Apexpages.addMessage(new ApexPages.message(Apexpages.Severity.ERROR,  'Lỗi: ' + e.getMessage()));
	// 	Apexpages.addMessage(new ApexPages.message(Apexpages.Severity.FATAL,  'Lỗi: ' + e.getMessage()));
	// }

	//=========================================================================================
	
/*
	* VisualPage_18
	* @created: 2019/10/30 Truong Trang Ngoc Phuc
	* @decription: Những method nào return là Pagereference thì phải có try cacth
	* @modified:
*/
	// private PageReference visualPage18(){
	// 	// try{
	// 	// 	return new PageReference();
	// 	// } catch (Exception ex) {
		
	// 	// }
	// 	return new PageReference();
	// }
}