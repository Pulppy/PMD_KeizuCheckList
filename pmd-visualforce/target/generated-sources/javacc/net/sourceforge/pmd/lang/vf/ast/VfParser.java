/* Generated By:JJTree&JavaCC: Do not edit this line. VfParser.java */
package net.sourceforge.pmd.lang.vf.ast;

import net.sourceforge.pmd.lang.ast.CharStream;
import net.sourceforge.pmd.lang.ast.TokenMgrError;

public class VfParser/*@bgen(jjtree)*/implements VfParserTreeConstants, VfParserConstants {/*@bgen(jjtree)*/
  protected JJTVfParserState jjtree = new JJTVfParserState();

        /**
	* Counter used to keep track of unclosed tags
	*/
        private OpenTagRegister tagRegister = new OpenTagRegister();

        /**
	 * Return the contents of a quote.
	 * @param quote String - starting and ending with " or '
	 * @return String a substring of quote: quote without the first and list
	 * character.
	 */
        private static String quoteContent(String quote) {
                return quote.substring(1, quote.length()-1);
        }

        /**
	 * Return the contents of a EL expression.
	 * @param expression String - starting with ${ or #{ and ending with }
	 * @return String a substring of expression: expression without the first two and list
	 * characters.
	 */
        private static String expressionContent(String expression) {
                return expression.substring(2, expression.length()-1).trim();
        }

/** *************************  VF GRAMMAR  **************************** */

/**
 * The root of the AST of a VF.
 */
  final public ASTCompilationUnit CompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(this, JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BYTE_ORDER_MARK:
        Bom();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      Prolog();
      Content();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new RuntimeException("Missing return statement in function");
  }

/**
 * The optional prolog of a VF, including (xml) declarations and DTD.
 */
  final public void Prolog() throws ParseException {
    if (jj_2_1(2147483647)) {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT_START:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        CommentTag();
      }
      Declaration();
    } else {
      ;
    }
    if (jj_2_2(2147483647)) {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT_START:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        CommentTag();
      }
      DoctypeDeclaration();
    } else {
      ;
    }
  }

  final public void Bom() throws ParseException {
    jj_consume_token(BYTE_ORDER_MARK);
  }

/**
 * Everything between a start-tag and the corresponding end-tag of an element (if an end tag exists).
 */
  final public void Content() throws ParseException {
 /*@bgen(jjtree) Content */
  ASTContent jjtn000 = new ASTContent(this, JJTCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TAG_START:
        case COMMENT_START:
        case CDATA_START:
        case HTML_SCRIPT_START:
        case EL_EXPRESSION:
        case UNPARSED_TEXT:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EL_EXPRESSION:
        case UNPARSED_TEXT:
          ElOrText();
          break;
        case TAG_START:
        case COMMENT_START:
        case CDATA_START:
        case HTML_SCRIPT_START:
          ContentElement();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/**
 * A single (non-text) element that can occur between a start-tag and end-tag of an element.
 *
 */
  final public void ContentElement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT_START:
      CommentTag();
      break;
    case TAG_START:
      Element();
      break;
    case CDATA_START:
      CData();
      break;
    case HTML_SCRIPT_START:
      HtmlScript();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * This production groups all characters between two tags, where
 * tag is an xml-tag "&lt;...&gt;" or CDATA "&lt;![CDATA[...]]&gt;".
 * Text consists of unparsed text and/or Expression Language expressions.
 */
  final public void ElOrText() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EL_EXPRESSION:
        ElExpression();
        break;
      case UNPARSED_TEXT:
        Text();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EL_EXPRESSION:
      case UNPARSED_TEXT:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
    }
  }

  final public void Text() throws ParseException {
 /*@bgen(jjtree) Text */
  ASTText jjtn000 = new ASTText(this, JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(UNPARSED_TEXT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void UnparsedTextNoWhitespace() throws ParseException {
 /*@bgen(jjtree) Text */
  ASTText jjtn000 = new ASTText(this, JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(UNPARSED_TEXT_NO_WHITESPACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setImage(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/**
 * Text that contains no single quotes, and that does not contain the start
 * of a EL expression.
 */
  final public void UnparsedTextNoSingleQuotes() throws ParseException {
 /*@bgen(jjtree) Text */
  ASTText jjtn000 = new ASTText(this, JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(UNPARSED_TEXT_NO_SINGLE_QUOTES);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/**
 * Text that contains no double quotes, and that does not contain the start
 * of a EL expression.
 */
  final public void UnparsedTextNoDoubleQuotes() throws ParseException {
 /*@bgen(jjtree) Text */
  ASTText jjtn000 = new ASTText(this, JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(UNPARSED_TEXT_NO_DOUBLE_QUOTES);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/**
 * An EL expression, not within an attribute value.
 */
  final public void ElExpression() throws ParseException {
 /*@bgen(jjtree) ElExpression */
  ASTElExpression jjtn000 = new ASTElExpression(this, JJTELEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EL_EXPRESSION);
      label_5:
      while (true) {
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NULL:
        case TRUE:
        case FALSE:
        case LPAREN:
        case LSQUARE:
        case PLUS:
        case MINUS:
        case EXCL:
        case STRING_LITERAL:
        case DIGITS:
        case IDENTIFIER_EL:
        case COMMENT_OPEN_SQ:
        case COMMENT_OPEN_DQ:
        case COMMENT_OPEN_SCRIPT:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(END_OF_EL);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LSQUARE:
      case PLUS:
      case MINUS:
      case EXCL:
      case STRING_LITERAL:
      case DIGITS:
      case IDENTIFIER_EL:
        ConditionalExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCATEQ:
        case DIVEQ:
        case PLUSEQ:
        case MINUSEQ:
        case MULEQ:
        case EQ:
          AssignmentOperator();
          Expression();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        break;
      case COMMENT_OPEN_SCRIPT:
        CommentExpression();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NULL:
          case TRUE:
          case FALSE:
          case LPAREN:
          case LSQUARE:
          case PLUS:
          case MINUS:
          case EXCL:
          case STRING_LITERAL:
          case DIGITS:
          case IDENTIFIER_EL:
          case COMMENT_OPEN_SCRIPT:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_6;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NULL:
          case TRUE:
          case FALSE:
          case LPAREN:
          case LSQUARE:
          case PLUS:
          case MINUS:
          case EXCL:
          case STRING_LITERAL:
          case DIGITS:
          case IDENTIFIER_EL:
            ConditionalExpression();
            break;
          case COMMENT_OPEN_SCRIPT:
            CommentExpression();
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case COMMENT_OPEN_DQ:
        ELDQCommentExpression();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NULL:
          case TRUE:
          case FALSE:
          case LPAREN:
          case LSQUARE:
          case PLUS:
          case MINUS:
          case EXCL:
          case STRING_LITERAL:
          case DIGITS:
          case IDENTIFIER_EL:
          case COMMENT_OPEN_DQ:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_7;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NULL:
          case TRUE:
          case FALSE:
          case LPAREN:
          case LSQUARE:
          case PLUS:
          case MINUS:
          case EXCL:
          case STRING_LITERAL:
          case DIGITS:
          case IDENTIFIER_EL:
            ConditionalExpression();
            break;
          case COMMENT_OPEN_DQ:
            ELDQCommentExpression();
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case COMMENT_OPEN_SQ:
        ELSQCommentExpression();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NULL:
          case TRUE:
          case FALSE:
          case LPAREN:
          case LSQUARE:
          case PLUS:
          case MINUS:
          case EXCL:
          case STRING_LITERAL:
          case DIGITS:
          case IDENTIFIER_EL:
          case COMMENT_OPEN_SQ:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_8;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NULL:
          case TRUE:
          case FALSE:
          case LPAREN:
          case LSQUARE:
          case PLUS:
          case MINUS:
          case EXCL:
          case STRING_LITERAL:
          case DIGITS:
          case IDENTIFIER_EL:
            ConditionalExpression();
            break;
          case COMMENT_OPEN_SQ:
            ELSQCommentExpression();
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULEQ:
      jj_consume_token(MULEQ);
      break;
    case DIVEQ:
      jj_consume_token(DIVEQ);
      break;
    case CONCATEQ:
      jj_consume_token(CONCATEQ);
      break;
    case PLUSEQ:
      jj_consume_token(PLUSEQ);
      break;
    case MINUSEQ:
      jj_consume_token(MINUSEQ);
      break;
    case EQ:
      jj_consume_token(EQ);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QQ:
      jj_consume_token(QQ);
      Expression();
      jj_consume_token(COLON);
      ConditionalExpression();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE_PIPE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      jj_consume_token(PIPE_PIPE);
      ConditionalAndExpression();
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    PowerExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP_AMP:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_10;
      }
      jj_consume_token(AMP_AMP);
      PowerExpression();
    }
  }

  final public void PowerExpression() throws ParseException {
    ConcatExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POW:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
      jj_consume_token(POW);
      ConcatExpression();
    }
  }

  final public void ConcatExpression() throws ParseException {
    EqualityExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      jj_consume_token(CONCAT);
      EqualityExpression();
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_EQ:
      case NOT_EQ:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_EQ:
        jj_consume_token(DOUBLE_EQ);
        break;
      case NOT_EQ:
        jj_consume_token(NOT_EQ);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      RelationalExpression();
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LE:
      case GE:
      case LT:
      case GT:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_15:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
      case MUL:
      case PERCENT:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      case PERCENT:
        jj_consume_token(PERCENT);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    case NULL:
    case TRUE:
    case FALSE:
    case LPAREN:
    case LSQUARE:
    case EXCL:
    case STRING_LITERAL:
    case DIGITS:
    case IDENTIFIER_EL:
      PrimaryExpression();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
    label_17:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_17;
      }
      PrimarySuffix();
    }
  }

  final public void ELSQCommentExpression() throws ParseException {
    jj_consume_token(COMMENT_OPEN_SQ);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT_INNER_TEXT_SQ:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMENT_INNER_TEXT_SQ);
    }
    jj_consume_token(COMMENT_CLOSE_SQ);
  }

  final public void ELDQCommentExpression() throws ParseException {
    jj_consume_token(COMMENT_OPEN_DQ);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT_INNER_TEXT_DQ:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMENT_INNER_TEXT_DQ);
    }
    jj_consume_token(COMMENT_CLOSE_DQ);
  }

  final public void CommentExpression() throws ParseException {
    jj_consume_token(COMMENT_OPEN_SCRIPT);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT_INNER_TEXT_SCRIPT:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMENT_INNER_TEXT_SCRIPT);
    }
    jj_consume_token(COMMENT_CLOSE_SCRIPT);
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case TRUE:
    case FALSE:
    case STRING_LITERAL:
    case DIGITS:
      Literal();
      break;
    case IDENTIFIER_EL:
      Identifier();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    case LSQUARE:
      jj_consume_token(LSQUARE);
      Expression();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      jj_consume_token(RSQUARE);
      break;
    case EXCL:
      NegationExpression();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimarySuffix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQUARE:
      jj_consume_token(LSQUARE);
      Expression();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      jj_consume_token(RSQUARE);
      break;
    case EXP_DOT:
      DotExpression();
      break;
    case LPAREN:
      Arguments();
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NegationExpression() throws ParseException {
 /*@bgen(jjtree) NegationExpression */
  ASTNegationExpression jjtn000 = new ASTNegationExpression(this, JJTNEGATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EXCL);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void DotExpression() throws ParseException {
 /*@bgen(jjtree) DotExpression */
  ASTDotExpression jjtn000 = new ASTDotExpression(this, JJTDOTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EXP_DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER_EL:
        Identifier();
        break;
      case NULL:
      case TRUE:
      case FALSE:
      case STRING_LITERAL:
      case DIGITS:
        Literal();
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void Arguments() throws ParseException {
 /*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LSQUARE:
      case PLUS:
      case MINUS:
      case EXCL:
      case STRING_LITERAL:
      case DIGITS:
      case IDENTIFIER_EL:
      case COMMENT_OPEN_SQ:
      case COMMENT_OPEN_DQ:
      case COMMENT_OPEN_SCRIPT:
        ArgumentList();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ArgumentList() throws ParseException {
    Expression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void Literal() throws ParseException {
 /*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s; Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetLastToken(getToken(0));
                                 jjtn000.setImage(t.image);
        break;
      case DIGITS:
        t = jj_consume_token(DIGITS);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
                         jjtn000.setImage(t.image);
        break;
      case TRUE:
      case FALSE:
        s = BooleanLiteral();
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetLastToken(getToken(0));
                                 jjtn000.setImage(s);
        break;
      case NULL:
        s = NullLiteral();
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
                              jjtn000.setImage(s);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
  }

  final public String BooleanLiteral() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return t.image;}
    throw new RuntimeException("Missing return statement in function");
  }

  final public String NullLiteral() throws ParseException {
  Token t;
    t = jj_consume_token(NULL);
               {if (true) return t.image;}
    throw new RuntimeException("Missing return statement in function");
  }

  final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(this, JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENTIFIER_EL);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
                              jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void ElExpressionInAttribute() throws ParseException {
 /*@bgen(jjtree) ElExpression */
  ASTElExpression jjtn000 = new ASTElExpression(this, JJTELEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EL_EXPRESSION_IN_ATTRIBUTE_SQ:
        jj_consume_token(EL_EXPRESSION_IN_ATTRIBUTE_SQ);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NULL:
        case TRUE:
        case FALSE:
        case LPAREN:
        case LSQUARE:
        case PLUS:
        case MINUS:
        case EXCL:
        case STRING_LITERAL:
        case DIGITS:
        case IDENTIFIER_EL:
        case COMMENT_OPEN_SQ:
        case COMMENT_OPEN_DQ:
        case COMMENT_OPEN_SCRIPT:
          Expression();
          break;
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        jj_consume_token(END_OF_EL_ATTRIB_SQ);
        break;
      case EL_EXPRESSION_IN_ATTRIBUTE_DQ:
        jj_consume_token(EL_EXPRESSION_IN_ATTRIBUTE_DQ);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NULL:
        case TRUE:
        case FALSE:
        case LPAREN:
        case LSQUARE:
        case PLUS:
        case MINUS:
        case EXCL:
        case STRING_LITERAL:
        case DIGITS:
        case IDENTIFIER_EL:
        case COMMENT_OPEN_SQ:
        case COMMENT_OPEN_DQ:
        case COMMENT_OPEN_SCRIPT:
          Expression();
          break;
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        jj_consume_token(END_OF_EL_ATTRIB_DQ);
        break;
      case EL_EXPRESSION_IN_ATTRIBUTE_NQ:
        jj_consume_token(EL_EXPRESSION_IN_ATTRIBUTE_NQ);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NULL:
        case TRUE:
        case FALSE:
        case LPAREN:
        case LSQUARE:
        case PLUS:
        case MINUS:
        case EXCL:
        case STRING_LITERAL:
        case DIGITS:
        case IDENTIFIER_EL:
        case COMMENT_OPEN_SQ:
        case COMMENT_OPEN_DQ:
        case COMMENT_OPEN_SCRIPT:
          Expression();
          break;
        default:
          jj_la1[46] = jj_gen;
          ;
        }
        jj_consume_token(END_OF_EL_ATTRIB_NQ);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
  }

  final public void ElExpressionInScript() throws ParseException {
 /*@bgen(jjtree) ElExpression */
  ASTElExpression jjtn000 = new ASTElExpression(this, JJTELEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EL_EXPRESSION_IN_SCRIPT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LSQUARE:
      case PLUS:
      case MINUS:
      case EXCL:
      case STRING_LITERAL:
      case DIGITS:
      case IDENTIFIER_EL:
      case COMMENT_OPEN_SQ:
      case COMMENT_OPEN_DQ:
      case COMMENT_OPEN_SCRIPT:
        Expression();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(END_OF_EL_SCRIPT);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void CData() throws ParseException {
 /*@bgen(jjtree) CData */
        ASTCData jjtn000 = new ASTCData(this, JJTCDATA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));StringBuffer content = new StringBuffer();
        Token t;
    try {
      jj_consume_token(CDATA_START);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNPARSED:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_24;
        }
        t = jj_consume_token(UNPARSED);
                                          content.append(t.image);
      }
      jj_consume_token(CDATA_END);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setImage(content.toString());
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/**
 * A XML element, either with a single empty tag, or with a starting and closing tag
 * with optional contained content.
 */
  final public void Element() throws ParseException {
 /*@bgen(jjtree) Element */
        ASTElement jjtn000 = new ASTElement(this, JJTELEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token startTag;
        Token endTag;
        String tagName;
    try {
      jj_consume_token(TAG_START);
      startTag = jj_consume_token(TAG_NAME);
                                        tagName = startTag.image;
                                                                jjtn000.setName(tagName);
                                                                tagRegister.openTag(jjtn000);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR_NAME:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_25;
        }
        Attribute();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAG_END:
        jj_consume_token(TAG_END);
                             jjtn000.setEmpty(false);
        Content();
        if (jj_2_5(2)) {
          jj_consume_token(ENDTAG_START);
          endTag = jj_consume_token(TAG_NAME);
                                               tagRegister.closeTag(endTag.image);
          jj_consume_token(TAG_END);
        } else {
          ;
        }
        break;
      case TAG_SLASHEND:
        jj_consume_token(TAG_SLASHEND);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
                                  jjtn000.setEmpty(true);
                                                  jjtn000.setUnclosed(false);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Attribute() throws ParseException {
 /*@bgen(jjtree) Attribute */
        ASTAttribute jjtn000 = new ASTAttribute(this, JJTATTRIBUTE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(ATTR_NAME);
                    jjtn000.setName(t.image);
      jj_consume_token(ATTR_EQ);
      AttributeValue();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/**
 * The value of an attribute of an element.
 * EL expressions
 * are parsed as sub-nodes of the AttributeValue node.
 */
  final public void AttributeValue() throws ParseException {
  /*@bgen(jjtree) AttributeValue */
  ASTAttributeValue jjtn000 = new ASTAttributeValue(this, JJTATTRIBUTEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_QUOTE:
        jj_consume_token(DOUBLE_QUOTE);
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EL_EXPRESSION_IN_ATTRIBUTE_NQ:
          case EL_EXPRESSION_IN_ATTRIBUTE_SQ:
          case EL_EXPRESSION_IN_ATTRIBUTE_DQ:
          case UNPARSED_TEXT_NO_DOUBLE_QUOTES:
            ;
            break;
          default:
            jj_la1[52] = jj_gen;
            break label_26;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNPARSED_TEXT_NO_DOUBLE_QUOTES:
            UnparsedTextNoDoubleQuotes();
            break;
          case EL_EXPRESSION_IN_ATTRIBUTE_NQ:
          case EL_EXPRESSION_IN_ATTRIBUTE_SQ:
          case EL_EXPRESSION_IN_ATTRIBUTE_DQ:
            ElExpressionInAttribute();
            break;
          default:
            jj_la1[53] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(ENDING_DOUBLE_QUOTE);
        break;
      case SINGLE_QUOTE:
        jj_consume_token(SINGLE_QUOTE);
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EL_EXPRESSION_IN_ATTRIBUTE_NQ:
          case EL_EXPRESSION_IN_ATTRIBUTE_SQ:
          case UNPARSED_TEXT_NO_SINGLE_QUOTES:
          case EL_EXPRESSION_IN_ATTRIBUTE_DQ:
            ;
            break;
          default:
            jj_la1[54] = jj_gen;
            break label_27;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNPARSED_TEXT_NO_SINGLE_QUOTES:
            UnparsedTextNoSingleQuotes();
            break;
          case EL_EXPRESSION_IN_ATTRIBUTE_NQ:
          case EL_EXPRESSION_IN_ATTRIBUTE_SQ:
          case EL_EXPRESSION_IN_ATTRIBUTE_DQ:
            ElExpressionInAttribute();
            break;
          default:
            jj_la1[55] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(ENDING_SINGLE_QUOTE);
        break;
      case NO_QUOTE_NO_WHITESPACE:
        jj_consume_token(NO_QUOTE_NO_WHITESPACE);
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EL_EXPRESSION_IN_ATTRIBUTE_NQ:
          case UNPARSED_TEXT_NO_WHITESPACE:
          case EL_EXPRESSION_IN_ATTRIBUTE_SQ:
          case EL_EXPRESSION_IN_ATTRIBUTE_DQ:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_28;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNPARSED_TEXT_NO_WHITESPACE:
            UnparsedTextNoWhitespace();
            break;
          case EL_EXPRESSION_IN_ATTRIBUTE_NQ:
          case EL_EXPRESSION_IN_ATTRIBUTE_SQ:
          case EL_EXPRESSION_IN_ATTRIBUTE_DQ:
            ElExpressionInAttribute();
            break;
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(ENDING_WHITESPACE);
        break;
      case IN_ATTR_WHITESPACE:
        jj_consume_token(IN_ATTR_WHITESPACE);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void CommentTag() throws ParseException {
    jj_consume_token(COMMENT_START);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT_TEXT:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_29;
      }
      jj_consume_token(COMMENT_TEXT);
    }
    jj_consume_token(COMMENT_END);
  }

  final public void Declaration() throws ParseException {
 /*@bgen(jjtree) Declaration */
        ASTDeclaration jjtn000 = new ASTDeclaration(this, JJTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(DECL_START);
      t = jj_consume_token(TAG_NAME);
                   jjtn000.setName(t.image);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR_NAME:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_30;
        }
        Attribute();
      }
      jj_consume_token(DECL_END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void DoctypeDeclaration() throws ParseException {
 /*@bgen(jjtree) DoctypeDeclaration */
        ASTDoctypeDeclaration jjtn000 = new ASTDoctypeDeclaration(this, JJTDOCTYPEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(DOCTYPE_DECL_START);
      jj_consume_token(WHITESPACES);
      t = jj_consume_token(NAME);
                      jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACES:
        jj_consume_token(WHITESPACES);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case SYSTEM:
        DoctypeExternalId();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHITESPACES:
          jj_consume_token(WHITESPACES);
          break;
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(DOCTYPE_DECL_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void DoctypeExternalId() throws ParseException {
 /*@bgen(jjtree) DoctypeExternalId */
        ASTDoctypeExternalId jjtn000 = new ASTDoctypeExternalId(this, JJTDOCTYPEEXTERNALID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token systemLiteral;
        Token pubIdLiteral;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYSTEM:
        jj_consume_token(SYSTEM);
        jj_consume_token(WHITESPACES);
        systemLiteral = jj_consume_token(QUOTED_LITERAL);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
                                  jjtn000.setUri(quoteContent(systemLiteral.image));
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        jj_consume_token(WHITESPACES);
        pubIdLiteral = jj_consume_token(QUOTED_LITERAL);
                                  jjtn000.setPublicId(quoteContent(pubIdLiteral.image));
        jj_consume_token(WHITESPACES);
        systemLiteral = jj_consume_token(QUOTED_LITERAL);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
                                  jjtn000.setUri(quoteContent(systemLiteral.image));
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
  }

  final public void HtmlScript() throws ParseException {
 /*@bgen(jjtree) HtmlScript */
  ASTHtmlScript jjtn000 = new ASTHtmlScript(this, JJTHTMLSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(HTML_SCRIPT_START);

      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR_NAME:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_31;
        }
        Attribute();
      }

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAG_END:
        jj_consume_token(TAG_END);
                                                     token_source.SwitchTo(HtmlScriptContentState);
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EL_EXPRESSION_IN_SCRIPT:
          case HTML_SCRIPT_CONTENT:
            ;
            break;
          default:
            jj_la1[66] = jj_gen;
            break label_32;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HTML_SCRIPT_CONTENT:
            HtmlScriptContent();
            break;
          case EL_EXPRESSION_IN_SCRIPT:
            ElExpressionInScript();
            break;
          default:
            jj_la1[67] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(HTML_SCRIPT_END_TAG);
        break;
      case TAG_SLASHEND:
        jj_consume_token(TAG_SLASHEND);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void HtmlScriptContent() throws ParseException {
 /*@bgen(jjtree) Text */
        ASTText jjtn000 = new ASTText(this, JJTTEXT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));StringBuffer content = new StringBuffer();
        Token t;
    try {
      label_33:
      while (true) {
        t = jj_consume_token(HTML_SCRIPT_CONTENT);
                                       content.append(t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML_SCRIPT_CONTENT:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_33;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
          jjtn000.setImage(content.toString());
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_75() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(WHITESPACES)) return true;
    if (jj_scan_token(QUOTED_LITERAL)) return true;
    if (jj_scan_token(WHITESPACES)) return true;
    if (jj_scan_token(QUOTED_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(EXP_DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(SYSTEM)) return true;
    if (jj_scan_token(WHITESPACES)) return true;
    if (jj_scan_token(QUOTED_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LSQUARE)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RSQUARE)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(EXCL)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(LSQUARE)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RSQUARE)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(DOCTYPE_DECL_START)) return true;
    if (jj_scan_token(WHITESPACES)) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    if (jj_scan_token(DOCTYPE_DECL_END)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(COMMENT_OPEN_SCRIPT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(109)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMENT_CLOSE_SCRIPT)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(DECL_START)) return true;
    if (jj_scan_token(TAG_NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DECL_END)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(NO_QUOTE_NO_WHITESPACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDING_WHITESPACE)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(COMMENT_OPEN_DQ)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(113)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMENT_CLOSE_DQ)) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(COMMENT_START)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(107)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMENT_END)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(SINGLE_QUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDING_SINGLE_QUOTE)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(COMMENT_OPEN_SQ)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(111)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMENT_CLOSE_SQ)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(DOUBLE_QUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDING_DOUBLE_QUOTE)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    }
    }
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_132()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ENDTAG_START)) return true;
    if (jj_scan_token(TAG_NAME)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(POW)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(PIPE_PIPE)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(ATTR_NAME)) return true;
    if (jj_scan_token(ATTR_EQ)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(AMP_AMP)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(QQ)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_111()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_119()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_127()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_84()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(EL_EXPRESSION_IN_ATTRIBUTE_SQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(END_OF_EL_ATTRIB_SQ)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(EL_EXPRESSION_IN_ATTRIBUTE_NQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_scan_token(END_OF_EL_ATTRIB_NQ)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(EL_EXPRESSION_IN_ATTRIBUTE_DQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_scan_token(END_OF_EL_ATTRIB_DQ)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(UNPARSED_TEXT_NO_DOUBLE_QUOTES)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(IDENTIFIER_EL)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(UNPARSED_TEXT_NO_SINGLE_QUOTES)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(DIGITS)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(UNPARSED_TEXT_NO_WHITESPACE)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_73()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public VfParserTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[70];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x4000000,0x4000000,0xe5000000,0xe5000000,0x65000000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x400a009e,0x1154800,0x400a009e,0x400a009e,0x400a009e,0x400a009e,0x400a009e,0x400a009e,0x400a009e,0x1154800,0x0,0x80000000,0x400,0x2000,0x1000,0x2800000,0x2800000,0x3c000000,0x3c000000,0xa0000,0x608000,0x608000,0xa0000,0x400a009e,0x0,0x0,0x0,0x40,0x4000009e,0x40,0x290,0xe,0x400a009e,0x40,0xe,0xc,0x400a009e,0x400a009e,0x400a009e,0x0,0x400a009e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x947,0x0,0x807,0x807,0x107,0x107,0x47,0x47,0x947,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x7,0x947,0x0,0x3,0x0,0x947,0x947,0x947,0x0,0x947,0x80000,0x800000,0x5000000,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000000,0x0,0x800000,0x2000,0x2000,0x18000,0x18000,0x800000,0x0,0x0,0x5000000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x20000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x124,0x0,0x0,0x0,0x0,0x324,0x324,0x164,0x164,0x12c,0x12c,0x1,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x180000,0x0,0x100000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public VfParser(CharStream stream) {
    token_source = new VfParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public VfParser(VfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(VfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 70; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[118];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 70; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 118; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
