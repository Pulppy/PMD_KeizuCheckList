/* Generated By:JJTree&JavaCC: Do not edit this line. VfParserConstants.java */
package net.sourceforge.pmd.lang.vf.ast;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface VfParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ALPHA_CHAR = 1;
  /** RegularExpression Id. */
  int NUM_CHAR = 2;
  /** RegularExpression Id. */
  int ALPHANUM_CHAR = 3;
  /** RegularExpression Id. */
  int IDENTIFIER_CHAR = 4;
  /** RegularExpression Id. */
  int IDENTIFIER = 5;
  /** RegularExpression Id. */
  int XMLNAME = 6;
  /** RegularExpression Id. */
  int QUOTED_STRING_NO_BREAKS = 7;
  /** RegularExpression Id. */
  int QUOTED_STRING = 8;
  /** RegularExpression Id. */
  int WHITESPACE = 9;
  /** RegularExpression Id. */
  int NEWLINE = 10;
  /** RegularExpression Id. */
  int QUOTE = 11;
  /** RegularExpression Id. */
  int NO_WHITESPACE_OR_LT_OR_DOLLAR = 12;
  /** RegularExpression Id. */
  int NO_BANG = 13;
  /** RegularExpression Id. */
  int OPENBRACE = 14;
  /** RegularExpression Id. */
  int NO_LT_OR_OPENBRACE = 15;
  /** RegularExpression Id. */
  int NO_ENDTAG_START = 16;
  /** RegularExpression Id. */
  int TEXT_IN_EL = 17;
  /** RegularExpression Id. */
  int CLOSEBRACE = 18;
  /** RegularExpression Id. */
  int DOT = 19;
  /** RegularExpression Id. */
  int COMMNT_START = 20;
  /** RegularExpression Id. */
  int COMMNT_END = 21;
  /** RegularExpression Id. */
  int TAG_START = 24;
  /** RegularExpression Id. */
  int ENDTAG_START = 25;
  /** RegularExpression Id. */
  int COMMENT_START = 26;
  /** RegularExpression Id. */
  int DECL_START = 27;
  /** RegularExpression Id. */
  int DOCTYPE_DECL_START = 28;
  /** RegularExpression Id. */
  int CDATA_START = 29;
  /** RegularExpression Id. */
  int HTML_SCRIPT_START = 30;
  /** RegularExpression Id. */
  int EL_EXPRESSION = 31;
  /** RegularExpression Id. */
  int UNPARSED_TEXT = 32;
  /** RegularExpression Id. */
  int NULL = 33;
  /** RegularExpression Id. */
  int TRUE = 34;
  /** RegularExpression Id. */
  int FALSE = 35;
  /** RegularExpression Id. */
  int LPAREN = 36;
  /** RegularExpression Id. */
  int RPAREN = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int LSQUARE = 39;
  /** RegularExpression Id. */
  int RSQUARE = 40;
  /** RegularExpression Id. */
  int EXP_DOT = 41;
  /** RegularExpression Id. */
  int AMP_AMP = 42;
  /** RegularExpression Id. */
  int CONCATEQ = 43;
  /** RegularExpression Id. */
  int CONCAT = 44;
  /** RegularExpression Id. */
  int POW = 45;
  /** RegularExpression Id. */
  int DIVEQ = 46;
  /** RegularExpression Id. */
  int DIV = 47;
  /** RegularExpression Id. */
  int PLUSEQ = 48;
  /** RegularExpression Id. */
  int PLUS = 49;
  /** RegularExpression Id. */
  int MINUSEQ = 50;
  /** RegularExpression Id. */
  int MINUS = 51;
  /** RegularExpression Id. */
  int MULEQ = 52;
  /** RegularExpression Id. */
  int MUL = 53;
  /** RegularExpression Id. */
  int PERCENT = 54;
  /** RegularExpression Id. */
  int DOUBLE_EQ = 55;
  /** RegularExpression Id. */
  int EQ = 56;
  /** RegularExpression Id. */
  int NOT_EQ = 57;
  /** RegularExpression Id. */
  int LE = 58;
  /** RegularExpression Id. */
  int GE = 59;
  /** RegularExpression Id. */
  int LT = 60;
  /** RegularExpression Id. */
  int GT = 61;
  /** RegularExpression Id. */
  int EXCL = 62;
  /** RegularExpression Id. */
  int PIPE_PIPE = 63;
  /** RegularExpression Id. */
  int STRING_LITERAL = 64;
  /** RegularExpression Id. */
  int DIGITS = 65;
  /** RegularExpression Id. */
  int IDENTIFIER_EL = 66;
  /** RegularExpression Id. */
  int COLON = 67;
  /** RegularExpression Id. */
  int QQ = 68;
  /** RegularExpression Id. */
  int END_OF_EL = 69;
  /** RegularExpression Id. */
  int COMMENT_OPEN_SQ = 70;
  /** RegularExpression Id. */
  int END_OF_EL_ATTRIB_SQ = 71;
  /** RegularExpression Id. */
  int COMMENT_OPEN_DQ = 72;
  /** RegularExpression Id. */
  int END_OF_EL_ATTRIB_DQ = 73;
  /** RegularExpression Id. */
  int END_OF_EL_ATTRIB_NQ = 74;
  /** RegularExpression Id. */
  int COMMENT_OPEN_SCRIPT = 75;
  /** RegularExpression Id. */
  int END_OF_EL_SCRIPT = 76;
  /** RegularExpression Id. */
  int WHITESPACES = 77;
  /** RegularExpression Id. */
  int NAME = 78;
  /** RegularExpression Id. */
  int PUBLIC = 79;
  /** RegularExpression Id. */
  int SYSTEM = 80;
  /** RegularExpression Id. */
  int DOCTYPE_DECL_END = 81;
  /** RegularExpression Id. */
  int QUOTED_LITERAL = 82;
  /** RegularExpression Id. */
  int UNPARSED = 83;
  /** RegularExpression Id. */
  int CDATA_END = 84;
  /** RegularExpression Id. */
  int TAG_NAME = 85;
  /** RegularExpression Id. */
  int LST_ERROR = 86;
  /** RegularExpression Id. */
  int ATTR_NAME = 87;
  /** RegularExpression Id. */
  int TAG_END = 88;
  /** RegularExpression Id. */
  int DECL_END = 89;
  /** RegularExpression Id. */
  int TAG_SLASHEND = 90;
  /** RegularExpression Id. */
  int ATTR_EQ = 91;
  /** RegularExpression Id. */
  int IN_TAG_ERROR = 92;
  /** RegularExpression Id. */
  int SINGLE_QUOTE = 93;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE = 94;
  /** RegularExpression Id. */
  int NO_QUOTE_NO_WHITESPACE = 95;
  /** RegularExpression Id. */
  int IN_ATTR_WHITESPACE = 96;
  /** RegularExpression Id. */
  int ENDING_WHITESPACE = 97;
  /** RegularExpression Id. */
  int EL_EXPRESSION_IN_ATTRIBUTE_NQ = 98;
  /** RegularExpression Id. */
  int UNPARSED_TEXT_NO_WHITESPACE = 99;
  /** RegularExpression Id. */
  int ENDING_SINGLE_QUOTE = 100;
  /** RegularExpression Id. */
  int EL_EXPRESSION_IN_ATTRIBUTE_SQ = 101;
  /** RegularExpression Id. */
  int UNPARSED_TEXT_NO_SINGLE_QUOTES = 102;
  /** RegularExpression Id. */
  int ENDING_DOUBLE_QUOTE = 103;
  /** RegularExpression Id. */
  int EL_EXPRESSION_IN_ATTRIBUTE_DQ = 104;
  /** RegularExpression Id. */
  int UNPARSED_TEXT_NO_DOUBLE_QUOTES = 105;
  /** RegularExpression Id. */
  int COMMENT_END = 106;
  /** RegularExpression Id. */
  int COMMENT_TEXT = 107;
  /** RegularExpression Id. */
  int COMMENT_CLOSE_SCRIPT = 108;
  /** RegularExpression Id. */
  int COMMENT_INNER_TEXT_SCRIPT = 109;
  /** RegularExpression Id. */
  int COMMENT_CLOSE_SQ = 110;
  /** RegularExpression Id. */
  int COMMENT_INNER_TEXT_SQ = 111;
  /** RegularExpression Id. */
  int COMMENT_CLOSE_DQ = 112;
  /** RegularExpression Id. */
  int COMMENT_INNER_TEXT_DQ = 113;
  /** RegularExpression Id. */
  int HTML_SCRIPT_END_TAG = 114;
  /** RegularExpression Id. */
  int EL_EXPRESSION_IN_SCRIPT = 115;
  /** RegularExpression Id. */
  int HTML_SCRIPT_CONTENT = 116;
  /** RegularExpression Id. */
  int BYTE_ORDER_MARK = 117;

  /** Lexical state. */
  int InlineCommentStateDQ = 0;
  /** Lexical state. */
  int InlineCommentStateSQ = 1;
  /** Lexical state. */
  int InlineCommentStateScript = 2;
  /** Lexical state. */
  int CommentState = 3;
  /** Lexical state. */
  int AttrValueBetweenDoubleQuotesState = 4;
  /** Lexical state. */
  int AttrValueBetweenSingleQuotesState = 5;
  /** Lexical state. */
  int AttrValueNoQuotesState = 6;
  /** Lexical state. */
  int AttrValueState = 7;
  /** Lexical state. */
  int StartTagState = 8;
  /** Lexical state. */
  int CDataState = 9;
  /** Lexical state. */
  int DocTypeExternalIdState = 10;
  /** Lexical state. */
  int DocTypeState = 11;
  /** Lexical state. */
  int ElAttribTagStateNQ = 12;
  /** Lexical state. */
  int ElInScriptState = 13;
  /** Lexical state. */
  int ElAttribTagStateDQ = 14;
  /** Lexical state. */
  int ElAttribTagStateSQ = 15;
  /** Lexical state. */
  int ElTagState = 16;
  /** Lexical state. */
  int HtmlScriptContentState = 17;
  /** Lexical state. */
  int InTagState = 18;
  /** Lexical state. */
  int AfterTagState = 19;
  /** Lexical state. */
  int DEFAULT = 20;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<ALPHA_CHAR>",
    "<NUM_CHAR>",
    "<ALPHANUM_CHAR>",
    "<IDENTIFIER_CHAR>",
    "<IDENTIFIER>",
    "<XMLNAME>",
    "<QUOTED_STRING_NO_BREAKS>",
    "<QUOTED_STRING>",
    "<WHITESPACE>",
    "<NEWLINE>",
    "<QUOTE>",
    "<NO_WHITESPACE_OR_LT_OR_DOLLAR>",
    "<NO_BANG>",
    "\"{\"",
    "<NO_LT_OR_OPENBRACE>",
    "<NO_ENDTAG_START>",
    "<TEXT_IN_EL>",
    "\"}\"",
    "\".\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 22>",
    "<token of kind 23>",
    "\"<\"",
    "\"</\"",
    "\"<!--\"",
    "\"<?\"",
    "\"<!DOCTYPE\"",
    "\"<![CDATA[\"",
    "\"<script\"",
    "\"{!\"",
    "<UNPARSED_TEXT>",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "<EXP_DOT>",
    "\"&&\"",
    "\"&=\"",
    "\"&\"",
    "\"^\"",
    "\"/=\"",
    "\"/\"",
    "\"+=\"",
    "\"+\"",
    "\"-=\"",
    "\"-\"",
    "\"*=\"",
    "\"*\"",
    "\"%\"",
    "\"==\"",
    "\"=\"",
    "<NOT_EQ>",
    "\"<=\"",
    "\">=\"",
    "\"<\"",
    "\">\"",
    "<EXCL>",
    "\"||\"",
    "<STRING_LITERAL>",
    "<DIGITS>",
    "<IDENTIFIER_EL>",
    "\":\"",
    "\"?\"",
    "<END_OF_EL>",
    "<COMMENT_OPEN_SQ>",
    "<END_OF_EL_ATTRIB_SQ>",
    "<COMMENT_OPEN_DQ>",
    "<END_OF_EL_ATTRIB_DQ>",
    "<END_OF_EL_ATTRIB_NQ>",
    "<COMMENT_OPEN_SCRIPT>",
    "<END_OF_EL_SCRIPT>",
    "<WHITESPACES>",
    "<NAME>",
    "\"PUBLIC\"",
    "\"SYSTEM\"",
    "\">\"",
    "<QUOTED_LITERAL>",
    "<UNPARSED>",
    "\"]]>\"",
    "<TAG_NAME>",
    "<LST_ERROR>",
    "<ATTR_NAME>",
    "\">\"",
    "<DECL_END>",
    "<TAG_SLASHEND>",
    "\"=\"",
    "<IN_TAG_ERROR>",
    "<SINGLE_QUOTE>",
    "<DOUBLE_QUOTE>",
    "<NO_QUOTE_NO_WHITESPACE>",
    "<IN_ATTR_WHITESPACE>",
    "\" \"",
    "<EL_EXPRESSION_IN_ATTRIBUTE_NQ>",
    "<UNPARSED_TEXT_NO_WHITESPACE>",
    "\"\\\'\"",
    "<EL_EXPRESSION_IN_ATTRIBUTE_SQ>",
    "<UNPARSED_TEXT_NO_SINGLE_QUOTES>",
    "\"\\\"\"",
    "<EL_EXPRESSION_IN_ATTRIBUTE_DQ>",
    "<UNPARSED_TEXT_NO_DOUBLE_QUOTES>",
    "<COMMENT_END>",
    "<COMMENT_TEXT>",
    "<COMMENT_CLOSE_SCRIPT>",
    "<COMMENT_INNER_TEXT_SCRIPT>",
    "<COMMENT_CLOSE_SQ>",
    "<COMMENT_INNER_TEXT_SQ>",
    "<COMMENT_CLOSE_DQ>",
    "<COMMENT_INNER_TEXT_DQ>",
    "\"</script>\"",
    "<EL_EXPRESSION_IN_SCRIPT>",
    "<HTML_SCRIPT_CONTENT>",
    "\"\\ufeff\"",
  };

}
