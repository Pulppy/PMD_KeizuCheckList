/* Generated By:JJTree&JavaCC: Do not edit this line. VfParserTokenManager.java */
package net.sourceforge.pmd.lang.vf.ast;
import net.sourceforge.pmd.lang.ast.CharStream;
import net.sourceforge.pmd.lang.ast.TokenMgrError;

/** Token Manager. */
public class VfParserTokenManager extends net.sourceforge.pmd.lang.ast.AbstractTokenManager implements VfParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 103);
      default :
         return jjMoveNfa_4(2, 0);
   }
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 0:
                  if (curChar != 33)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  if ((0xfffffff9ffffffffL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_8()
{
   return jjMoveNfa_8(0, 0);
}
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 36)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7ff201000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_18(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_18(int pos, long active0, long active1)
{
   return jjMoveNfa_18(jjStopStringLiteralDfa_18(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_18()
{
   switch(curChar)
   {
      case 61:
         return jjStopAtPos(0, 91);
      case 62:
         return jjStopAtPos(0, 88);
      default :
         return jjMoveNfa_18(1, 0);
   }
}
private int jjMoveNfa_18(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(7, 8);
                  else if (curChar == 33)
                     jjCheckNAdd(3);
                  else if (curChar == 36)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 63)
                     jjCheckNAdd(3);
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x7ff201000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 62 && kind > 89)
                     kind = 89;
                  break;
               case 4:
                  if (curChar == 63)
                     jjCheckNAdd(3);
                  break;
               case 5:
                  if (curChar == 33)
                     jjCheckNAdd(3);
                  break;
               case 6:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if (curChar == 62 && kind > 90)
                     kind = 90;
                  break;
               case 8:
                  if (curChar == 32)
                     jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(1, 0);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     kind = 112;
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(1, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     kind = 110;
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_19(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000000L) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_19(int pos, long active0)
{
   return jjMoveNfa_19(jjStopStringLiteralDfa_19(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_19()
{
   switch(curChar)
   {
      case 60:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_19(0x7e000000L);
      case 123:
         return jjMoveStringLiteralDfa1_19(0x80000000L);
      default :
         return jjMoveNfa_19(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_19(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         return jjMoveStringLiteralDfa2_19(active0, 0x34000000L);
      case 47:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 63:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_19(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_19(0, active0);
}
private int jjMoveStringLiteralDfa2_19(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_19(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_19(active0, 0x4000000L);
      case 91:
         return jjMoveStringLiteralDfa3_19(active0, 0x20000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_19(active0, 0x40000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_19(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_19(1, active0);
}
private int jjMoveStringLiteralDfa3_19(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_19(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_19(active0, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_19(active0, 0x10000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_19(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_19(2, active0);
}
private int jjMoveStringLiteralDfa4_19(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_19(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_19(active0, 0x10000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_19(active0, 0x20000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_19(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_19(3, active0);
}
private int jjMoveStringLiteralDfa5_19(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_19(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_19(active0, 0x20000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_19(active0, 0x40000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_19(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_19(4, active0);
}
private int jjMoveStringLiteralDfa6_19(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_19(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 30);
         return jjMoveStringLiteralDfa7_19(active0, 0x20000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_19(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_19(5, active0);
}
private int jjMoveStringLiteralDfa7_19(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_19(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_19(active0, 0x20000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_19(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_19(6, active0);
}
private int jjMoveStringLiteralDfa8_19(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_19(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(8, 29);
         break;
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_19(7, active0);
}
private int jjMoveNfa_19(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0xefffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0xfffffffdffffffffL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 1:
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 81);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_10(0x8000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_10(0x10000L);
      default :
         return jjMoveNfa_10(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_10(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_10(active1, 0x8000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_10(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_10(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_10(active1, 0x8000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_10(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_10(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_10(active1, 0x8000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_10(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_10(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_10(active1, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_10(active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_10(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(5, 79);
         break;
      case 77:
      case 109:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(5, 80);
         break;
      default :
         break;
   }
   return jjStartNfa_10(4, 0L, active1);
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 39 && kind > 82)
                     kind = 82;
                  break;
               case 4:
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  jjAddStates(3, 4);
                  break;
               case 5:
                  jjAddStates(0, 2);
                  break;
               case 7:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 4);
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_14(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc00000000000L) != 0L)
            return 22;
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 7;
         }
         if ((active0 & 0x1400000000000000L) != 0L)
            return 1;
         if ((active0 & 0xc00000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 21;
         }
         return -1;
      case 1:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 21;
         }
         return -1;
      case 2:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
            return 21;
         }
         return -1;
      case 3:
         if ((active0 & 0x600000000L) != 0L)
            return 21;
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
            return 21;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0, long active1)
{
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_14()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 54);
      case 38:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_14(0xc0000000000L);
      case 40:
         return jjStopAtPos(0, 36);
      case 41:
         return jjStopAtPos(0, 37);
      case 42:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_14(0x10000000000000L);
      case 43:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_14(0x1000000000000L);
      case 44:
         return jjStopAtPos(0, 38);
      case 45:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_14(0x4000000000000L);
      case 47:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_14(0x400000000000L);
      case 58:
         return jjStopAtPos(0, 67);
      case 60:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_14(0x400000000000000L);
      case 61:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_14(0x80000000000000L);
      case 62:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_14(0x800000000000000L);
      case 63:
         return jjStopAtPos(0, 68);
      case 91:
         return jjStopAtPos(0, 39);
      case 93:
         return jjStopAtPos(0, 40);
      case 94:
         return jjStopAtPos(0, 45);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_14(0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_14(0x200000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_14(0x400000000L);
      case 124:
         return jjMoveStringLiteralDfa1_14(0x8000000000000000L);
      default :
         return jjMoveNfa_14(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_14(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 61:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_14(active0, 0x800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_14(active0, 0x400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_14(active0, 0x200000000L);
      case 124:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_14(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_14(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_14(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_14(active0, 0xa00000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_14(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_14(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_14(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_14(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_14(3, 34, 21);
         break;
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_14(3, 33, 21);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_14(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_14(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_14(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_14(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_14(4, 35, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_14(3, active0, 0L);
}
private int jjStartNfaWithStates_14(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_14(state, pos + 1);
}
private int jjMoveNfa_14(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAddStates(5, 7);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 36)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 33)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 46)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
               case 21:
                  if ((0x7ff201000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 1:
                  if (curChar == 62 && kind > 57)
                     kind = 57;
                  break;
               case 2:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 61 && kind > 57)
                     kind = 57;
                  break;
               case 4:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 33 && kind > 62)
                     kind = 62;
                  break;
               case 9:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 64)
                     kind = 64;
                  break;
               case 12:
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 16:
                  if (curChar == 34 && kind > 64)
                     kind = 64;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar != 36)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar == 42 && kind > 72)
                     kind = 72;
                  break;
               case 23:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(5, 7);
                  break;
               case 26:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(27, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  else if (curChar == 126)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 5:
                  if (curChar == 126 && kind > 62)
                     kind = 62;
                  break;
               case 6:
                  if ((0x10000000100000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 8:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  jjAddStates(11, 12);
                  break;
               case 13:
                  jjAddStates(8, 10);
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 24:
                  if (curChar == 125 && kind > 73)
                     kind = 73;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 7:
               case 21:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 12);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_9(0x100000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_9(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa2_9(active1, 0x100000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_9(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(2, 84);
         break;
      default :
         return 3;
   }
   return 3;
}
private final int jjStopStringLiteralDfa_16(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 7;
         }
         if ((active0 & 0x1400000000000000L) != 0L)
            return 1;
         if ((active0 & 0xc00000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 21;
         }
         return -1;
      case 1:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 21;
         }
         return -1;
      case 2:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
            return 21;
         }
         return -1;
      case 3:
         if ((active0 & 0x600000000L) != 0L)
            return 21;
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
            return 21;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_16(int pos, long active0, long active1)
{
   return jjMoveNfa_16(jjStopStringLiteralDfa_16(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_16()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 54);
      case 38:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_16(0xc0000000000L);
      case 40:
         return jjStopAtPos(0, 36);
      case 41:
         return jjStopAtPos(0, 37);
      case 42:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_16(0x10000000000000L);
      case 43:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_16(0x1000000000000L);
      case 44:
         return jjStopAtPos(0, 38);
      case 45:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_16(0x4000000000000L);
      case 47:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_16(0x400000000000L);
      case 58:
         return jjStopAtPos(0, 67);
      case 60:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_16(0x400000000000000L);
      case 61:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_16(0x80000000000000L);
      case 62:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_16(0x800000000000000L);
      case 63:
         return jjStopAtPos(0, 68);
      case 91:
         return jjStopAtPos(0, 39);
      case 93:
         return jjStopAtPos(0, 40);
      case 94:
         return jjStopAtPos(0, 45);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_16(0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_16(0x200000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_16(0x400000000L);
      case 124:
         return jjMoveStringLiteralDfa1_16(0x8000000000000000L);
      default :
         return jjMoveNfa_16(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_16(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 61:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_16(active0, 0x800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_16(active0, 0x400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_16(active0, 0x200000000L);
      case 124:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_16(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_16(active0, 0xa00000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_16(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_16(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_16(3, 34, 21);
         break;
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_16(3, 33, 21);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_16(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_16(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_16(4, 35, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_16(3, active0, 0L);
}
private int jjStartNfaWithStates_16(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_16(state, pos + 1);
}
private int jjMoveNfa_16(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAddStates(13, 15);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 33)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 46)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
               case 21:
                  if ((0x7ff201000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 1:
                  if (curChar == 62 && kind > 57)
                     kind = 57;
                  break;
               case 2:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 61 && kind > 57)
                     kind = 57;
                  break;
               case 4:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 33 && kind > 62)
                     kind = 62;
                  break;
               case 9:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 64)
                     kind = 64;
                  break;
               case 12:
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 16:
                  if (curChar == 34 && kind > 64)
                     kind = 64;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar != 36)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 23:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(13, 15);
                  break;
               case 24:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(25, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  else if (curChar == 126)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 5:
                  if (curChar == 126 && kind > 62)
                     kind = 62;
                  break;
               case 6:
                  if ((0x10000000100000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 8:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  jjAddStates(11, 12);
                  break;
               case 13:
                  jjAddStates(8, 10);
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar == 125 && kind > 69)
                     kind = 69;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 7:
               case 21:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 12);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(2, 0);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xffffff7affffffffL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 96)
                        kind = 96;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 94)
                        kind = 94;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 93)
                        kind = 93;
                  }
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(16, 19);
                  break;
               case 0:
                  if (curChar == 39)
                     kind = 93;
                  break;
               case 1:
                  if (curChar == 34)
                     kind = 94;
                  break;
               case 3:
                  if (curChar == 32 && kind > 96)
                     kind = 96;
                  break;
               case 4:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(16, 19);
                  break;
               case 5:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(5, 0);
                  break;
               case 6:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(6, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  kind = 95;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 95)
                     kind = 95;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(1, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     kind = 108;
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_15(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc00000000000L) != 0L)
            return 22;
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 7;
         }
         if ((active0 & 0x1400000000000000L) != 0L)
            return 1;
         if ((active0 & 0xc00000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 21;
         }
         return -1;
      case 1:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 21;
         }
         return -1;
      case 2:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
            return 21;
         }
         return -1;
      case 3:
         if ((active0 & 0x600000000L) != 0L)
            return 21;
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
            return 21;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_15(int pos, long active0, long active1)
{
   return jjMoveNfa_15(jjStopStringLiteralDfa_15(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_15()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 54);
      case 38:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_15(0xc0000000000L);
      case 40:
         return jjStopAtPos(0, 36);
      case 41:
         return jjStopAtPos(0, 37);
      case 42:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_15(0x10000000000000L);
      case 43:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_15(0x1000000000000L);
      case 44:
         return jjStopAtPos(0, 38);
      case 45:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_15(0x4000000000000L);
      case 47:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_15(0x400000000000L);
      case 58:
         return jjStopAtPos(0, 67);
      case 60:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_15(0x400000000000000L);
      case 61:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_15(0x80000000000000L);
      case 62:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_15(0x800000000000000L);
      case 63:
         return jjStopAtPos(0, 68);
      case 91:
         return jjStopAtPos(0, 39);
      case 93:
         return jjStopAtPos(0, 40);
      case 94:
         return jjStopAtPos(0, 45);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_15(0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_15(0x200000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_15(0x400000000L);
      case 124:
         return jjMoveStringLiteralDfa1_15(0x8000000000000000L);
      default :
         return jjMoveNfa_15(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_15(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 61:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_15(active0, 0x800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_15(active0, 0x400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_15(active0, 0x200000000L);
      case 124:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_15(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_15(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_15(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_15(active0, 0xa00000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_15(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_15(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_15(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_15(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_15(3, 34, 21);
         break;
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_15(3, 33, 21);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_15(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_15(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_15(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_15(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_15(4, 35, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_15(3, active0, 0L);
}
private int jjStartNfaWithStates_15(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_15(state, pos + 1);
}
private int jjMoveNfa_15(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAddStates(5, 7);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 36)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 33)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 46)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
               case 21:
                  if ((0x7ff201000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 1:
                  if (curChar == 62 && kind > 57)
                     kind = 57;
                  break;
               case 2:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 61 && kind > 57)
                     kind = 57;
                  break;
               case 4:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 33 && kind > 62)
                     kind = 62;
                  break;
               case 9:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 64)
                     kind = 64;
                  break;
               case 12:
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 16:
                  if (curChar == 34 && kind > 64)
                     kind = 64;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar != 36)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar == 42 && kind > 70)
                     kind = 70;
                  break;
               case 23:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(5, 7);
                  break;
               case 26:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(27, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  else if (curChar == 126)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 5:
                  if (curChar == 126 && kind > 62)
                     kind = 62;
                  break;
               case 6:
                  if ((0x10000000100000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 8:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  jjAddStates(11, 12);
                  break;
               case 13:
                  jjAddStates(8, 10);
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 24:
                  if (curChar == 125 && kind > 71)
                     kind = 71;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 7:
               case 21:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 12);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_17(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            return -1;
         }
         return -1;
      case 1:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_17(int pos, long active0, long active1)
{
   return jjMoveNfa_17(jjStopStringLiteralDfa_17(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_17()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_17(0x4000000000000L);
      default :
         return jjMoveNfa_17(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_17(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_17(active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_17(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_17(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_17(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_17(active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_17(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_17(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_17(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_17(active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_17(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_17(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_17(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_17(active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_17(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_17(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_17(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_17(active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_17(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_17(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_17(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_17(active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_17(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_17(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_17(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_17(active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_17(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_17(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_17(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(8, 114);
         break;
      default :
         break;
   }
   return jjStartNfa_17(7, 0L, active1);
}
private int jjMoveNfa_17(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 116)
                     kind = 116;
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 33)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if (kind > 116)
                     kind = 116;
                  break;
               case 6:
                  if ((0xfffffffdffffffffL & l) != 0L && kind > 116)
                     kind = 116;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0xf7ffffffffffffffL & l) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 5:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (kind > 116)
                     kind = 116;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 116)
                     kind = 116;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(3, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 62)
                     kind = 106;
                  break;
               case 3:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_11()
{
   return jjMoveNfa_11(1, 0);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(0);
                  }
                  else if ((0x400001000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(2);
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 77;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x7ff201000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 100);
      default :
         return jjMoveNfa_5(2, 0);
   }
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
                  if ((0xffffff7fffffffffL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 0:
                  if (curChar != 33)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  if ((0xffffff7dffffffffL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 102)
                        kind = 102;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 7;
         }
         if ((active0 & 0x1400000000000000L) != 0L)
            return 1;
         if ((active0 & 0xc00000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 21;
         }
         return -1;
      case 1:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 21;
         }
         return -1;
      case 2:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
            return 21;
         }
         return -1;
      case 3:
         if ((active0 & 0x600000000L) != 0L)
            return 21;
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
            return 21;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1)
{
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 54);
      case 38:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_12(0xc0000000000L);
      case 40:
         return jjStopAtPos(0, 36);
      case 41:
         return jjStopAtPos(0, 37);
      case 42:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_12(0x10000000000000L);
      case 43:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_12(0x1000000000000L);
      case 44:
         return jjStopAtPos(0, 38);
      case 45:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_12(0x4000000000000L);
      case 47:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_12(0x400000000000L);
      case 58:
         return jjStopAtPos(0, 67);
      case 60:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_12(0x400000000000000L);
      case 61:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_12(0x80000000000000L);
      case 62:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_12(0x800000000000000L);
      case 63:
         return jjStopAtPos(0, 68);
      case 91:
         return jjStopAtPos(0, 39);
      case 93:
         return jjStopAtPos(0, 40);
      case 94:
         return jjStopAtPos(0, 45);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_12(0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_12(0x200000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_12(0x400000000L);
      case 124:
         return jjMoveStringLiteralDfa1_12(0x8000000000000000L);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_12(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 61:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_12(active0, 0x800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_12(active0, 0x400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_12(active0, 0x200000000L);
      case 124:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_12(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_12(active0, 0xa00000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_12(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_12(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_12(3, 34, 21);
         break;
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_12(3, 33, 21);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_12(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_12(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_12(4, 35, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_12(3, active0, 0L);
}
private int jjStartNfaWithStates_12(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_12(state, pos + 1);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 36)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 33)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 46)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
               case 21:
                  if ((0x7ff201000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 1:
                  if (curChar == 62 && kind > 57)
                     kind = 57;
                  break;
               case 2:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 61 && kind > 57)
                     kind = 57;
                  break;
               case 4:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 33 && kind > 62)
                     kind = 62;
                  break;
               case 9:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 64)
                     kind = 64;
                  break;
               case 12:
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 16:
                  if (curChar == 34 && kind > 64)
                     kind = 64;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar != 36)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 74)
                        kind = 74;
                  }
                  else if (curChar == 126)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 5:
                  if (curChar == 126 && kind > 62)
                     kind = 62;
                  break;
               case 6:
                  if ((0x10000000100000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 8:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  jjAddStates(11, 12);
                  break;
               case 13:
                  jjAddStates(8, 10);
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 23:
                  if (curChar == 125 && kind > 74)
                     kind = 74;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 7:
               case 21:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 12);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_20(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_20(int pos, long active0, long active1)
{
   return jjMoveNfa_20(jjStopStringLiteralDfa_20(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_20()
{
   switch(curChar)
   {
      case 60:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_20(0x7e000000L);
      case 65279:
         return jjStopAtPos(0, 117);
      default :
         return jjMoveNfa_20(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_20(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_20(active0, 0x34000000L);
      case 47:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 63:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_20(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_20(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_20(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_20(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_20(active0, 0x4000000L);
      case 91:
         return jjMoveStringLiteralDfa3_20(active0, 0x20000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_20(active0, 0x40000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_20(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_20(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_20(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_20(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_20(active0, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_20(active0, 0x10000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_20(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_20(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_20(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_20(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_20(active0, 0x10000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_20(active0, 0x20000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_20(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_20(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_20(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_20(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_20(active0, 0x20000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_20(active0, 0x40000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_20(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_20(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_20(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_20(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 30);
         return jjMoveStringLiteralDfa7_20(active0, 0x20000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_20(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_20(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_20(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_20(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_20(active0, 0x20000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_20(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_20(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_20(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_20(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(8, 29);
         break;
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_20(7, active0, 0L);
}
private int jjMoveNfa_20(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 22;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 32:
         return jjStopAtPos(0, 97);
      default :
         return jjMoveNfa_6(2, 0);
   }
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
                  if ((0xfffffffeffffffffL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 0:
                  if (curChar != 33)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  if ((0xfffffffdffffffffL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc00000000000L) != 0L)
            return 22;
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 7;
         }
         if ((active0 & 0x1400000000000000L) != 0L)
            return 1;
         if ((active0 & 0xc00000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 21;
         }
         return -1;
      case 1:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 21;
         }
         return -1;
      case 2:
         if ((active0 & 0xe00000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
            return 21;
         }
         return -1;
      case 3:
         if ((active0 & 0x600000000L) != 0L)
            return 21;
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
            return 21;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1)
{
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_13()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 54);
      case 38:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_13(0xc0000000000L);
      case 40:
         return jjStopAtPos(0, 36);
      case 41:
         return jjStopAtPos(0, 37);
      case 42:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_13(0x10000000000000L);
      case 43:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_13(0x1000000000000L);
      case 44:
         return jjStopAtPos(0, 38);
      case 45:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_13(0x4000000000000L);
      case 47:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_13(0x400000000000L);
      case 58:
         return jjStopAtPos(0, 67);
      case 60:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_13(0x400000000000000L);
      case 61:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_13(0x80000000000000L);
      case 62:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_13(0x800000000000000L);
      case 63:
         return jjStopAtPos(0, 68);
      case 91:
         return jjStopAtPos(0, 39);
      case 93:
         return jjStopAtPos(0, 40);
      case 94:
         return jjStopAtPos(0, 45);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_13(0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_13(0x200000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_13(0x400000000L);
      case 124:
         return jjMoveStringLiteralDfa1_13(0x8000000000000000L);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_13(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 61:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_13(active0, 0x800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_13(active0, 0x400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_13(active0, 0x200000000L);
      case 124:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_13(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_13(active0, 0xa00000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_13(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_13(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_13(3, 34, 21);
         break;
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_13(3, 33, 21);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_13(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_13(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_13(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_13(4, 35, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_13(3, active0, 0L);
}
private int jjStartNfaWithStates_13(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_13(state, pos + 1);
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAddStates(5, 7);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 36)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 33)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 46)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
               case 21:
                  if ((0x7ff201000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 1:
                  if (curChar == 62 && kind > 57)
                     kind = 57;
                  break;
               case 2:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 61 && kind > 57)
                     kind = 57;
                  break;
               case 4:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 33 && kind > 62)
                     kind = 62;
                  break;
               case 9:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 64)
                     kind = 64;
                  break;
               case 12:
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 16:
                  if (curChar == 34 && kind > 64)
                     kind = 64;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar != 36)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar == 42 && kind > 75)
                     kind = 75;
                  break;
               case 23:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(5, 7);
                  break;
               case 26:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(27, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 76)
                        kind = 76;
                  }
                  else if (curChar == 126)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(21);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 5:
                  if (curChar == 126 && kind > 62)
                     kind = 62;
                  break;
               case 6:
                  if ((0x10000000100000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 8:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  jjAddStates(11, 12);
                  break;
               case 13:
                  jjAddStates(8, 10);
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 24:
                  if (curChar == 125 && kind > 76)
                     kind = 76;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 7:
               case 21:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(21);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 12);
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   5, 7, 8, 2, 3, 26, 27, 24, 13, 15, 16, 10, 11, 24, 25, 22, 
   5, 0, 6, 1, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\74", "\74\57", 
"\74\41\55\55", "\74\77", null, null, null, "\173\41", null, null, null, null, "\50", "\51", 
"\54", "\133", "\135", null, "\46\46", "\46\75", "\46", "\136", "\57\75", "\57", 
"\53\75", "\53", "\55\75", "\55", "\52\75", "\52", "\45", "\75\75", "\75", null, 
"\74\75", "\76\75", "\74", "\76", null, "\174\174", null, null, null, "\72", "\77", null, 
null, null, null, null, null, null, null, null, null, null, null, "\76", null, null, 
"\135\135\76", null, null, null, "\76", null, null, "\75", null, null, null, null, null, 
"\40", null, null, "\47", null, null, "\42", null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\ufeff", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "InlineCommentStateDQ",
   "InlineCommentStateSQ",
   "InlineCommentStateScript",
   "CommentState",
   "AttrValueBetweenDoubleQuotesState",
   "AttrValueBetweenSingleQuotesState",
   "AttrValueNoQuotesState",
   "AttrValueState",
   "StartTagState",
   "CDataState",
   "DocTypeExternalIdState",
   "DocTypeState",
   "ElAttribTagStateNQ",
   "ElInScriptState",
   "ElAttribTagStateDQ",
   "ElAttribTagStateSQ",
   "ElTagState",
   "HtmlScriptContentState",
   "InTagState",
   "AfterTagState",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 
   8, 3, 8, 11, 9, 18, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 1, 5, 0, 4, 6, 
   2, 17, -1, 10, -1, -1, 19, -1, -1, 19, 18, 20, -1, 19, 19, 19, 7, -1, 5, 4, 6, 18, 18, 12, -1, 
   18, 15, -1, 18, 14, -1, 19, -1, 13, -1, 15, -1, 14, -1, 19, 13, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffff000001L, 0x3fffffffffffffL, 
};
static final long[] jjtoSkip = {
   0xc00000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x800000L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[28];
private final int[] jjstateSet = new int[56];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public VfParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public VfParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 28; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 21 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 20;
int defaultLexState = 20;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 113)
       {
          jjmatchedKind = 113;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 111)
       {
          jjmatchedKind = 111;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 109)
       {
          jjmatchedKind = 109;
       }
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       if (jjmatchedPos == 0 && jjmatchedKind > 107)
       {
          jjmatchedKind = 107;
       }
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       if (jjmatchedPos == 0 && jjmatchedKind > 86)
       {
          jjmatchedKind = 86;
       }
       break;
     case 9:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       if (jjmatchedPos == 0 && jjmatchedKind > 83)
       {
          jjmatchedKind = 83;
       }
       break;
     case 10:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
     case 12:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       break;
     case 14:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_14();
       break;
     case 15:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_15();
       break;
     case 16:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_16();
       break;
     case 17:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_17();
       break;
     case 18:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_18();
       if (jjmatchedPos == 0 && jjmatchedKind > 92)
       {
          jjmatchedKind = 92;
       }
       break;
     case 19:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_19();
       break;
     case 20:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_20();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 95 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                               input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
