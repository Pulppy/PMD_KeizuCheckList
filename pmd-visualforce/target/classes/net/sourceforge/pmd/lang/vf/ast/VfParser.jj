/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. VfParser.jj */
/*@egen*/options {
	USER_CHAR_STREAM = true;
	                      
	UNICODE_INPUT=true;
	FORCE_LA_CHECK = false;
	IGNORE_CASE = true;
	STATIC = false;

	           
	             
	                    
}

PARSER_BEGIN(VfParser)
package net.sourceforge.pmd.lang.vf.ast;

import net.sourceforge.pmd.lang.ast.CharStream;
import net.sourceforge.pmd.lang.ast.TokenMgrError;

public class VfParser/*@bgen(jjtree)*/implements VfParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTVfParserState jjtree = new JJTVfParserState();

/*@egen*/


	/**
	* Counter used to keep track of unclosed tags
	*/
	private OpenTagRegister tagRegister = new OpenTagRegister();

	/**
	 * Return the contents of a quote.
	 * @param quote String - starting and ending with " or '
	 * @return String a substring of quote: quote without the first and list
	 * character.
	 */
	private static String quoteContent(String quote) {
		return quote.substring(1, quote.length()-1);
	}

	/**
	 * Return the contents of a EL expression.
	 * @param expression String - starting with ${ or #{ and ending with }
	 * @return String a substring of expression: expression without the first two and list
	 * characters.
	 */
	private static String expressionContent(String expression) {
		return expression.substring(2, expression.length()-1).trim();
	}
}

PARSER_END(VfParser)

/** *************************  VF LEXICON  **************************** */

<*> TOKEN :
{
  <#ALPHA_CHAR: [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff"
      ] >
| <#NUM_CHAR:   [
       "0"-"9"
      ] >
| <#ALPHANUM_CHAR: ( <ALPHA_CHAR> | <NUM_CHAR> ) >
| <#IDENTIFIER_CHAR: ( <ALPHANUM_CHAR> | [ "_", "-", ":" ] ) >
| <#IDENTIFIER: <ALPHA_CHAR> (<IDENTIFIER_CHAR>)* >
| <#XMLNAME: (<ALPHA_CHAR> | "_" | ":") (<IDENTIFIER_CHAR>)* >
| <#QUOTED_STRING_NO_BREAKS: ( "'" ( ~["'", "\r", "\n"] )* "'" )
                    | ( "\"" ( ~["\"", "\r", "\n"] )* "\"" ) >
| <#QUOTED_STRING: ( "'" ( ~["'"] )* "'" ) | ( "\"" ( ~["\""] | "\\\"" )* "\"" ) >
| <#WHITESPACE: ( " " | "\t" | "\n" | "\r" ) >
| <#NEWLINE:    ( "\r\n" | "\r" | "\n" ) >
| <#QUOTE:      ( "'" | "\"" )>
| <#NO_WHITESPACE_OR_LT_OR_DOLLAR: (~[" ", "\t", "\n", "\r", "<"])>
| <#NO_BANG: (~["!"])>
| <#OPENBRACE: ("{") >
| <#NO_LT_OR_OPENBRACE: (~["<","{"])>
| <#NO_ENDTAG_START: (~["<"]~["/"]) >
| <#TEXT_IN_EL: (~["}", "'", "\""])+ >
| <#CLOSEBRACE: ("}")>
| <#DOT: "." >
| <#COMMNT_START: "/*" >
| <#COMMNT_END: "*/" >
}


<DEFAULT> SKIP :
{
  < (<WHITESPACE>)+ >
}

<AfterTagState, InTagState, HtmlScriptContentState, ElTagState, ElAttribTagStateSQ, ElAttribTagStateDQ, ElInScriptState > SPECIAL_TOKEN:
{
  < (<WHITESPACE>)+ >
}

<DEFAULT, AfterTagState> TOKEN :
{
  <TAG_START:      			"<"       	> 	: StartTagState
| <ENDTAG_START:   			"</"      	> 	: StartTagState
| <COMMENT_START:  			"<!--"    	> 	: CommentState
| <DECL_START:     			"<?"	  	>	: StartTagState
| <DOCTYPE_DECL_START: 		"<!DOCTYPE" >	: DocTypeState
| <CDATA_START:    			"<![CDATA[" >   : CDataState
| <HTML_SCRIPT_START:       "<script"   >   : InTagState

}

<AfterTagState> TOKEN :
{
	<EL_EXPRESSION: "{!" > : ElTagState
|	<UNPARSED_TEXT: ( <NO_LT_OR_OPENBRACE>|<OPENBRACE><NO_BANG>)+ >
}

<ElTagState, ElAttribTagStateSQ, ElAttribTagStateDQ, ElAttribTagStateNQ, ElInScriptState> TOKEN :
{
	  <NULL: "null" >
	| <TRUE: "true" >
	| <FALSE: "false" >
	| <LPAREN: "(" >
	| <RPAREN: ")" >
	| <COMMA: "," >
	| <LSQUARE: "[" >
	| <RSQUARE: "]" >
	| <EXP_DOT: <DOT> >
	| <AMP_AMP: "&&" >
	| <CONCATEQ: "&=">
	| <CONCAT: "&" >
	| <POW: "^" >
	| <DIVEQ: "/=" >
	| <DIV: "/" >
	| <PLUSEQ: "+=" >
	| <PLUS: "+" >
	| <MINUSEQ: "-=">
	| <MINUS: "-" >
	| <MULEQ: "*=" >
	| <MUL: "*" >
	| <PERCENT: "%">
	| <DOUBLE_EQ: "==" >
	| <EQ: "=" >
	| <NOT_EQ: ("<>" | "!=" ) >
	| <LE: "<=" >
	| <GE: ">=" >
	| <LT: "<" >
	| <GT: ">" >
	| <EXCL: ("!"|"~"|"NOT") >
	| <PIPE_PIPE: "||" >
	| <STRING_LITERAL: <QUOTED_STRING> >
	| <DIGITS: (<NUM_CHAR>)+ (<DOT> (<NUM_CHAR>)+)? >
	| <IDENTIFIER_EL: <IDENTIFIER> >
	| <COLON: ":">
	| <QQ: "?">

}

<ElTagState> TOKEN :
{
	<END_OF_EL: (<WHITESPACES>)? <CLOSEBRACE> > : AfterTagState
}

<ElAttribTagStateSQ> TOKEN :
{
	<COMMENT_OPEN_SQ: <COMMNT_START> > : InlineCommentStateSQ 	
|	<END_OF_EL_ATTRIB_SQ: (<WHITESPACES>)? <CLOSEBRACE> > : AttrValueBetweenSingleQuotesState
}

<ElAttribTagStateDQ> TOKEN :
{	
	<COMMENT_OPEN_DQ: <COMMNT_START> > : InlineCommentStateDQ 	
|	<END_OF_EL_ATTRIB_DQ: (<WHITESPACES>)? <CLOSEBRACE> > : AttrValueBetweenDoubleQuotesState
}

<ElAttribTagStateNQ> TOKEN :
{
   		<END_OF_EL_ATTRIB_NQ: (<WHITESPACES>)? <CLOSEBRACE> > : AttrValueNoQuotesState
}

<ElInScriptState> TOKEN :
{
	  <COMMENT_OPEN_SCRIPT: <COMMNT_START> > : InlineCommentStateScript
	| <END_OF_EL_SCRIPT: (<WHITESPACES>)? <CLOSEBRACE> > : HtmlScriptContentState
}

<DocTypeState, DocTypeExternalIdState> TOKEN :
{
	<WHITESPACES: (<WHITESPACE>)+ >
}

<DocTypeState> TOKEN:
{
	<NAME: (<XMLNAME>) > : DocTypeExternalIdState
}

<DocTypeExternalIdState> TOKEN:
{
	<PUBLIC: "PUBLIC">
|	<SYSTEM: "SYSTEM">
|	<DOCTYPE_DECL_END: ">" > : AfterTagState
|	<QUOTED_LITERAL: (<QUOTED_STRING>) >
}

<CDataState> TOKEN :
{
	<UNPARSED: 		(~[])  >
  | <CDATA_END:		("]]>") > : AfterTagState
}

<StartTagState> TOKEN :
{
  <TAG_NAME: <IDENTIFIER> > : InTagState
| <LST_ERROR: ~[]>          : DEFAULT
}

<InTagState> TOKEN :
{
  <ATTR_NAME: <IDENTIFIER> >
| <TAG_END: ">"            >            : AfterTagState
| <DECL_END: ("?>" | "!>") >            : AfterTagState
| <TAG_SLASHEND: ("/>" | "/ >") >       : AfterTagState
| <ATTR_EQ: "=" >                       : AttrValueState
| <IN_TAG_ERROR: ~[] >
}

<AttrValueState> TOKEN :
{
  <SINGLE_QUOTE: (<WHITESPACES>)? "'"> : AttrValueBetweenSingleQuotesState
| <DOUBLE_QUOTE: (<WHITESPACES>)? "\"">: AttrValueBetweenDoubleQuotesState
| <NO_QUOTE_NO_WHITESPACE: ~["\"","'"," "] > { input_stream.backup(1);} : AttrValueNoQuotesState
| <IN_ATTR_WHITESPACE: [" "] > : InTagState //support for empty attributes
}

<AttrValueNoQuotesState> TOKEN :
{
     <ENDING_WHITESPACE: " " >: InTagState
	|	<EL_EXPRESSION_IN_ATTRIBUTE_NQ: "{!" (<WHITESPACES>)? > : ElAttribTagStateNQ
	| <UNPARSED_TEXT_NO_WHITESPACE: ( ~["{", " "] | (["{"] ~["!"]) )+ >

}

<AttrValueBetweenSingleQuotesState> TOKEN :
{
	<ENDING_SINGLE_QUOTE: "'"> : InTagState
|	<EL_EXPRESSION_IN_ATTRIBUTE_SQ: "{!" (<WHITESPACES>)? > : ElAttribTagStateSQ
|	<UNPARSED_TEXT_NO_SINGLE_QUOTES:
		( (~["{", "'"]) | (["{"] ~["!", "'"]) )+ >
}

<AttrValueBetweenDoubleQuotesState> TOKEN :
{
	  <ENDING_DOUBLE_QUOTE: "\""> : InTagState
	| <EL_EXPRESSION_IN_ATTRIBUTE_DQ: "{!" (<WHITESPACES>)? > : ElAttribTagStateDQ
	| <UNPARSED_TEXT_NO_DOUBLE_QUOTES:
		( (~["{", "\""]) | (["{"] ~["!", "\""]) )+ >
}

<CommentState> TOKEN :
{
  < COMMENT_END:  ("--" (" ")* ">" ) > : AfterTagState
| < COMMENT_TEXT: (~[]) >
}

<InlineCommentStateScript> TOKEN :
{
  < COMMENT_CLOSE_SCRIPT:  (<COMMNT_END>) > : ElInScriptState 
| < COMMENT_INNER_TEXT_SCRIPT: (~[]) >
}

<InlineCommentStateSQ> TOKEN :
{
  < COMMENT_CLOSE_SQ:  (<COMMNT_END>) > : ElAttribTagStateSQ 
| < COMMENT_INNER_TEXT_SQ: (~[]) >
}


<InlineCommentStateDQ> TOKEN :
{
  < COMMENT_CLOSE_DQ:  (<COMMNT_END>) > : ElAttribTagStateDQ 
| < COMMENT_INNER_TEXT_DQ: (~[]) >
}

<HtmlScriptContentState> TOKEN :
{
		  <HTML_SCRIPT_END_TAG : "</script>" > : AfterTagState
		| <EL_EXPRESSION_IN_SCRIPT: "{!" (<WHITESPACES>)? > : ElInScriptState
		| <HTML_SCRIPT_CONTENT: ( (~["{"]) | (["{"] ~["!"]) ) >
}

/** *************************  VF GRAMMAR  **************************** */

/**
 * The root of the AST of a VF.
 */
ASTCompilationUnit CompilationUnit() :
{/*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(this, JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CompilationUnit */
        try {
/*@egen*/
	(Bom())?
  Prolog()

  Content() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/**
 * The optional prolog of a VF, including (xml) declarations and DTD.
 */
void Prolog()       :
{}
{
	(
    	LOOKAHEAD( ( CommentTag() )* 	Declaration() )
    	( CommentTag() )*
	  	Declaration()
	)?

    (
    	LOOKAHEAD( ( CommentTag() )* 	DoctypeDeclaration() )
    	( CommentTag() )*
	    DoctypeDeclaration()
	)?
}

void Bom()       :
{}
{
	<BYTE_ORDER_MARK: "\ufeff" >
}

/**
 * Everything between a start-tag and the corresponding end-tag of an element (if an end tag exists).
 */
void Content() :
{/*@bgen(jjtree) Content */
  ASTContent jjtn000 = new ASTContent(this, JJTCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Content */
        try {
/*@egen*/
	( ElOrText() | ContentElement()	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/**
 * A single (non-text) element that can occur between a start-tag and end-tag of an element.
 *
 */
void ContentElement()       :
{}
{
	(
		CommentTag()
	  |	Element()
	  | CData()
      | HtmlScript()
	)
}


/**
 * This production groups all characters between two tags, where
 * tag is an xml-tag "&lt;...&gt;" or CDATA "&lt;![CDATA[...]]&gt;".
 * Text consists of unparsed text and/or Expression Language expressions.
 */
void ElOrText()       :
{}
{
	  ( ElExpression() | Text() )+
}

void Text() :
{/*@bgen(jjtree) Text */
  ASTText jjtn000 = new ASTText(this, JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; }
{/*@bgen(jjtree) Text */
        try {
/*@egen*/
	t = <UNPARSED_TEXT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.setImage(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void UnparsedTextNoWhitespace()       :
{/*@bgen(jjtree) Text */
  ASTText jjtn000 = new ASTText(this, JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t;}
{/*@bgen(jjtree) Text */
  try {
/*@egen*/
  (
    t = <UNPARSED_TEXT_NO_WHITESPACE>
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
		jjtn000.setImage(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

/**
 * Text that contains no single quotes, and that does not contain the start
 * of a EL expression.
 */
void UnparsedTextNoSingleQuotes()       :
{/*@bgen(jjtree) Text */
  ASTText jjtn000 = new ASTText(this, JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; }
{/*@bgen(jjtree) Text */
        try {
/*@egen*/
	t = <UNPARSED_TEXT_NO_SINGLE_QUOTES>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.setImage(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/**
 * Text that contains no double quotes, and that does not contain the start
 * of a EL expression.
 */
void UnparsedTextNoDoubleQuotes()       :
{/*@bgen(jjtree) Text */
  ASTText jjtn000 = new ASTText(this, JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; }
{/*@bgen(jjtree) Text */
        try {
/*@egen*/
	t = <UNPARSED_TEXT_NO_DOUBLE_QUOTES>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.setImage(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/**
 * An EL expression, not within an attribute value.
 */
void ElExpression() :
{/*@bgen(jjtree) ElExpression */
  ASTElExpression jjtn000 = new ASTElExpression(this, JJTELEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ElExpression */
        try {
/*@egen*/
	<EL_EXPRESSION>
	(Expression())+
	<END_OF_EL>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Expression() :
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	ConditionalExpression() [ AssignmentOperator() Expression() ]
|  	CommentExpression() ( ConditionalExpression() | CommentExpression() )*
|  	ELDQCommentExpression() ( ConditionalExpression() | ELDQCommentExpression() )*
|  	ELSQCommentExpression() ( ConditionalExpression() | ELSQCommentExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void AssignmentOperator()       :
{}
{
 	<MULEQ> | <DIVEQ> | <CONCATEQ> | <PLUSEQ> | <MINUSEQ> | <EQ>
}

void ConditionalExpression()        :
{}
{
  ConditionalOrExpression() [ <QQ> Expression() <COLON> ConditionalExpression() ]
}

void ConditionalOrExpression()       :
{}
{
  ConditionalAndExpression() ( <PIPE_PIPE> ConditionalAndExpression() )*
}

void ConditionalAndExpression()        :
{}
{
  PowerExpression() ( <AMP_AMP> PowerExpression() )*
}

void PowerExpression()       :
{}
{
  ConcatExpression() ( <POW> ConcatExpression() )*
}

void ConcatExpression()       :
{}
{
  EqualityExpression() ( <CONCAT> EqualityExpression() )*
}

void EqualityExpression()       :
{}
{
  RelationalExpression() ( ( <DOUBLE_EQ> | <NOT_EQ> ) RelationalExpression() )*
}

void RelationalExpression()       :
{}
{
  AdditiveExpression() ( ( <LT> | <GT> | <LE> | <GE> ) AdditiveExpression() )*
}

void AdditiveExpression()        :
{}
{
  MultiplicativeExpression() ( LOOKAHEAD(2) ( <PLUS> | <MINUS> ) MultiplicativeExpression() )*
}

void MultiplicativeExpression()        :
{}
{
  UnaryExpression() ( ( <MUL> | <DIV> | <PERCENT> ) UnaryExpression() )*
}

void UnaryExpression()        :
{}
{
	  ( <PLUS> | <MINUS> ) UnaryExpression()
	|  PrimaryExpression()
}

void PrimaryExpression()       :
{}
{
   PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )* 
}

void ELSQCommentExpression()       :
{}
{
  <COMMENT_OPEN_SQ>  ( <COMMENT_INNER_TEXT_SQ> )*  <COMMENT_CLOSE_SQ> 
}

void ELDQCommentExpression()       :
{}
{
  <COMMENT_OPEN_DQ>  (  <COMMENT_INNER_TEXT_DQ> )*  <COMMENT_CLOSE_DQ> 
}

void CommentExpression()       :
{}
{
  <COMMENT_OPEN_SCRIPT>  ( <COMMENT_INNER_TEXT_SCRIPT> )*  <COMMENT_CLOSE_SCRIPT> 
}

void PrimaryPrefix()       :
{}
{
	  Literal()
	| Identifier()	
	| <LPAREN> Expression() <RPAREN>
	| <LSQUARE> Expression() (<COMMA> Expression())*   <RSQUARE>
	| NegationExpression()
}

void PrimarySuffix()       :
{}
{
	  <LSQUARE> Expression() (<COMMA> Expression())*  <RSQUARE>
	| DotExpression()
	| Arguments()
}

void NegationExpression() :
{/*@bgen(jjtree) NegationExpression */
  ASTNegationExpression jjtn000 = new ASTNegationExpression(this, JJTNEGATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) NegationExpression */
  try {
/*@egen*/
  ( <EXCL> ) Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}


void DotExpression() :
{/*@bgen(jjtree) DotExpression */
  ASTDotExpression jjtn000 = new ASTDotExpression(this, JJTDOTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DotExpression */
        try {
/*@egen*/
	<EXP_DOT> (Identifier() | Literal() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void Arguments() :
{/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Arguments */
  try {
/*@egen*/
  <LPAREN> [ ArgumentList() ] <RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ArgumentList()      :
{}
{
  Expression() ( <COMMA> Expression() )*
}

void Literal() :
{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ String s; Token t; }
{/*@bgen(jjtree) Literal */
          try {
/*@egen*/
	  t = <STRING_LITERAL>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetLastToken(getToken(0));
                               }
/*@egen*/ { jjtn000.setImage(t.image);}
	| t = <DIGITS>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ { jjtn000.setImage(t.image);}
	| s = BooleanLiteral()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetLastToken(getToken(0));
                               }
/*@egen*/ { jjtn000.setImage(s);}
	| s = NullLiteral()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
/*@egen*/ { jjtn000.setImage(s);}/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/

}

String BooleanLiteral()       :
{ Token t; }
{
   ( t =	<TRUE>
	| t = <FALSE>
	) { return t.image; }
}

String NullLiteral()       :
{ Token t; }
{
  t = <NULL> { return t.image;}
}

void Identifier() :
{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(this, JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t;	}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t = <IDENTIFIER_EL>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
/*@egen*/ { jjtn000.setImage(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void ElExpressionInAttribute()               :
{/*@bgen(jjtree) ElExpression */
  ASTElExpression jjtn000 = new ASTElExpression(this, JJTELEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ElExpression */
                try {
/*@egen*/
		<EL_EXPRESSION_IN_ATTRIBUTE_SQ> [Expression()] <END_OF_EL_ATTRIB_SQ>
	| <EL_EXPRESSION_IN_ATTRIBUTE_DQ> [Expression()] <END_OF_EL_ATTRIB_DQ>
	| <EL_EXPRESSION_IN_ATTRIBUTE_NQ> [Expression()] <END_OF_EL_ATTRIB_NQ>/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
}

void ElExpressionInScript()               :
{/*@bgen(jjtree) ElExpression */
  ASTElExpression jjtn000 = new ASTElExpression(this, JJTELEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ElExpression */
        try {
/*@egen*/
	<EL_EXPRESSION_IN_SCRIPT> [Expression()] <END_OF_EL_SCRIPT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void CData() :
{/*@bgen(jjtree) CData */
        ASTCData jjtn000 = new ASTCData(this, JJTCDATA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuffer content = new StringBuffer();
	Token t;
}
{/*@bgen(jjtree) CData */
        try {
/*@egen*/
	<CDATA_START> ( t = <UNPARSED>  { content.append(t.image); } )* <CDATA_END>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.setImage(content.toString());
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/**
 * A XML element, either with a single empty tag, or with a starting and closing tag
 * with optional contained content.
 */
void Element() :
{/*@bgen(jjtree) Element */
        ASTElement jjtn000 = new ASTElement(this, JJTELEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token startTag;
	Token endTag;
	String tagName;
}
{/*@bgen(jjtree) Element */
    try {
/*@egen*/
    (
	      (
	        <TAG_START>
	    	startTag = <TAG_NAME> { tagName = startTag.image;
	    							jjtn000.setName(tagName);
	    							tagRegister.openTag(jjtn000);
	    							}
	   	  )
	      (Attribute())*
	      (
	    	(
	    	  <TAG_END>{ jjtn000.setEmpty(false);}

		   	 (Content())

			 (	LOOKAHEAD(2) <ENDTAG_START>
			  endTag = <TAG_NAME> {tagRegister.closeTag(endTag.image);}
		      <TAG_END>)?
	    	)
	   		|
	     	(<TAG_SLASHEND>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
                                }
/*@egen*/ { jjtn000.setEmpty(true);
	     					  jjtn000.setUnclosed(false);
	     					}
	     	)
	      )
   )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Attribute() :
{/*@bgen(jjtree) Attribute */
        ASTAttribute jjtn000 = new ASTAttribute(this, JJTATTRIBUTE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/	Token t; }
{/*@bgen(jjtree) Attribute */
  try {
/*@egen*/
  t = <ATTR_NAME> { jjtn000.setName(t.image); }
  (
  	<ATTR_EQ> AttributeValue()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

/**
 * The value of an attribute of an element.
 * EL expressions
 * are parsed as sub-nodes of the AttributeValue node.
 */
 void AttributeValue() :
 {/*@bgen(jjtree) AttributeValue */
  ASTAttributeValue jjtn000 = new ASTAttributeValue(this, JJTATTRIBUTEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
 {/*@bgen(jjtree) AttributeValue */
        try {
/*@egen*/
   	(
 	  	( 	<DOUBLE_QUOTE>
 		  	( (	UnparsedTextNoDoubleQuotes() |	ElExpressionInAttribute()	) )*
 			( 	<ENDING_DOUBLE_QUOTE> )
 		)
 		|
 	  	( 	<SINGLE_QUOTE>
 		  	( ( UnparsedTextNoSingleQuotes() | ElExpressionInAttribute() ) )*
 			( 	<ENDING_SINGLE_QUOTE> )
 		)
		| ( <NO_QUOTE_NO_WHITESPACE>
			( (  UnparsedTextNoWhitespace() | ElExpressionInAttribute() ) )*
		( <ENDING_WHITESPACE> )
		)
 		| <IN_ATTR_WHITESPACE>
 	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
 }

void CommentTag()       :
{}
{
  <COMMENT_START> ( <COMMENT_TEXT> )* <COMMENT_END>
}

void Declaration() :
{/*@bgen(jjtree) Declaration */
        ASTDeclaration jjtn000 = new ASTDeclaration(this, JJTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/	Token t; }
{/*@bgen(jjtree) Declaration */
  try {
/*@egen*/
  <DECL_START>
  t = <TAG_NAME> { jjtn000.setName(t.image); }
  (Attribute())*
  <DECL_END>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void DoctypeDeclaration() :
{/*@bgen(jjtree) DoctypeDeclaration */
        ASTDoctypeDeclaration jjtn000 = new ASTDoctypeDeclaration(this, JJTDOCTYPEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/	Token t; }
{/*@bgen(jjtree) DoctypeDeclaration */
        try {
/*@egen*/
	<DOCTYPE_DECL_START>
	 <WHITESPACES>
	 t = <NAME> { jjtn000.setName(t.image); }
	 (<WHITESPACES>)?
	 (DoctypeExternalId() 	 (<WHITESPACES>)?)?
 	<DOCTYPE_DECL_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void DoctypeExternalId() :
{/*@bgen(jjtree) DoctypeExternalId */
        ASTDoctypeExternalId jjtn000 = new ASTDoctypeExternalId(this, JJTDOCTYPEEXTERNALID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token systemLiteral;
	Token pubIdLiteral;
}
{/*@bgen(jjtree) DoctypeExternalId */
                try {
/*@egen*/
		(	<SYSTEM>
			<WHITESPACES>
			systemLiteral = <QUOTED_LITERAL>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
                                }
/*@egen*/
				{ jjtn000.setUri(quoteContent(systemLiteral.image)); }
		)
	|
		(	<PUBLIC>
			<WHITESPACES>
			pubIdLiteral = <QUOTED_LITERAL>
				{ jjtn000.setPublicId(quoteContent(pubIdLiteral.image)); }
			<WHITESPACES>
			systemLiteral = <QUOTED_LITERAL>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
                                }
/*@egen*/
				{ jjtn000.setUri(quoteContent(systemLiteral.image)); }
		)/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
}

void HtmlScript() :
{/*@bgen(jjtree) HtmlScript */
  ASTHtmlScript jjtn000 = new ASTHtmlScript(this, JJTHTMLSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) HtmlScript */
        try {
/*@egen*/
  	<HTML_SCRIPT_START>         {}
  	(Attribute() )*             {}
  	(
  	  (
  	   <TAG_END>				    {token_source.SwitchTo(HtmlScriptContentState);}
  	   ( ( HtmlScriptContent() | ElExpressionInScript() ) )*
	   <HTML_SCRIPT_END_TAG>

	  )
	|
	  (
	    <TAG_SLASHEND>
	  )
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void HtmlScriptContent()       :
{/*@bgen(jjtree) Text */
        ASTText jjtn000 = new ASTText(this, JJTTEXT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	StringBuffer content = new StringBuffer();
	Token t;
}
{/*@bgen(jjtree) Text */
        try {
/*@egen*/
	( t = <HTML_SCRIPT_CONTENT>  { content.append(t.image); } )+/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ jjtn000.setImage(content.toString()); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

